# credit @codeflix_bots

# referal code credit - @VJBots

import os
import logging
import random
import asyncio
import pytz
from Script import script
from datetime import datetime
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait
from pyrogram.types import *
from database.ia_filterdb import Media, get_file_details, unpack_new_file_id, get_bad_files
from database.users_chats_db import db, delete_all_referal_users, get_referal_users_count, get_referal_all_users, referal_add_user
from info import *
from utils import get_settings, get_size, is_req_subscribed, save_group_settings, temp, verify_user, check_token, check_verification, get_token, get_shortlink, get_tutorial
from database.connections_mdb import active_connection
# from plugins.pm_filter import ENABLE_SHORTLINK
import re, asyncio, os, sys
import json
import base64
logger = logging.getLogger(__name__)

TIMEZONE = "Asia/Kolkata"
BATCH_FILES = {}

@Client.on_message(filters.command("gsend") & filters.user(ADMINS))
async def send_chatmsg(bot, message):
    if message.reply_to_message:
        target_id = message.text
        command = ["/gsend"]
        for cmd in command:
            if cmd in target_id:
                target_id = target_id.replace(cmd, "")
        success = False
        try:
            chat = await bot.get_chat(int(target_id))
            await message.reply_to_message.copy(int(chat.id))
            success = True
        except Exception as e:
            await message.reply_text(f"<b>E Ä Ä·¥è Ä :- <code>{e}</code></b>")
        if success:
            await message.reply_text(f"<b>Y·¥è·¥ú Ä M·¥áss·¥Ä…¢·¥á H·¥Äs B·¥á·¥á…¥ S·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è S·¥á…¥·¥Ö To {chat.id}.</b>")
        else:
            await message.reply_text("<b>A…¥ E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö !</b>")
    else:
        await message.reply_text("<b>C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö I…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á...</b>")

@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        buttons = [[
                    InlineKeyboardButton('‚Ä¢ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è ·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ‚Ä¢', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ç·¥Äs·¥õ·¥á Ä ‚Ä¢', url="https://t.me/rb1bots"),
                    InlineKeyboardButton('‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/helpsarthak_bot')
                ],[
                    InlineKeyboardButton('‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/requestbox1official')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply(script.GSTART_TXT.format(message.from_user.mention if message.from_user else message.chat.title, temp.U_NAME, temp.B_NAME), reply_markup=reply_markup, disable_web_page_preview=True)
        await asyncio.sleep(2) # üò¢ https://github.com/EvamariaTG/EvaMaria/blob/master/plugins/p_ttishow.py#L17 üò¨ wait a bit, before checking.
        if not await db.get_chat(message.chat.id):
            total=await client.get_chat_members_count(message.chat.id)
            await client.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, "Unknown"))       
            await db.add_chat(message.chat.id, message.chat.title)
        return 
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.LOG_TEXT_P.format(message.from_user.id, message.from_user.mention))
    if len(message.command) != 2:
        buttons = [[
                    InlineKeyboardButton('‚òÜ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚òÜ', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üí∏ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è üí∏', callback_data="shortlink_info"),
                    InlineKeyboardButton('‚Ä¢ Íú±·¥ú·¥©·¥©·¥è Ä·¥õ ‚Ä¢', callback_data='group_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                ],[
                    InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="premium_info")
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text("<i>·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è <b> ü·¥ú·¥Ñ è</b>.\n ú·¥è·¥ò·¥á  è·¥è·¥ú' Ä·¥á ·¥Ö·¥è…™…¥…¢ ·¥°·¥á ü ü...</i>")
        await asyncio.sleep(0.4)
        await m.edit_text("üëÄ")
        await asyncio.sleep(0.5)
        await m.edit_text("‚ö°")
        await asyncio.sleep(0.5)
        await m.edit_text("<b><i>s·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ...</i></b>")
        await asyncio.sleep(0.4)
        await m.delete()        
        m=await message.reply_sticker("CAACAgUAAxkBAAEBt1Jlx6H4hU132BpZrG-DqKF5SveK2QACawUAAqzQYVYtbBdxglzmPR4E") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
        
    if AUTH_CHANNEL and not await is_req_subscribed(client, message):
        try:
            invite_link = await client.create_chat_invite_link(int(AUTH_CHANNEL), creates_join_request=True)
        except ChatAdminRequired:
            logger.error("Make sure Bot is admin in Forcesub channel")
            return
        btn = [
            [
                InlineKeyboardButton(
                    "üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå", url=invite_link.invite_link
                )
            ]
        ]

        if message.command[1] != "subscribe":
            try:
                kk, file_id = message.command[1].split("_", 1)
                btn.append([InlineKeyboardButton("·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥", callback_data=f"checksub#{kk}#{file_id}")])
            except (IndexError, ValueError):
                btn.append([InlineKeyboardButton("·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")])
        await client.send_photo(
            chat_id=message.from_user.id,
            photo="https://graph.org/file/9649c1dcbae09f2e7700e.jpg",
            caption="<b>·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ·¥á·¥Ö Íú∞…™ ü·¥á.</b>",
            reply_markup=InlineKeyboardMarkup(btn),
            parse_mode=enums.ParseMode.MARKDOWN
            )
        return
    if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
        buttons = [[
                    InlineKeyboardButton('‚òÜ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚òÜ', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üí∏ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è üí∏', callback_data="shortlink_info"),
                    InlineKeyboardButton('‚Ä¢ Íú±·¥ú·¥©·¥©·¥è Ä·¥õ ‚Ä¢', callback_data='group_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                ],[
                    InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="premium_info")
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text("<i>·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è <b> ü·¥ú·¥Ñ è</b>.\n ú·¥è·¥ò·¥á  è·¥è·¥ú' Ä·¥á ·¥Ö·¥è…™…¥…¢ ·¥°·¥á ü ü...</i>")
        await asyncio.sleep(0.4)
        await m.edit_text("üëÄ")
        await asyncio.sleep(0.5)
        await m.edit_text("‚ö°")
        await asyncio.sleep(0.5)
        await m.edit_text("<b><i>Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ...</i></b>")
        await asyncio.sleep(0.4)
        await m.delete()        
        m=await message.reply_sticker("CAACAgUAAxkBAAEBt1Jlx6H4hU132BpZrG-DqKF5SveK2QACawUAAqzQYVYtbBdxglzmPR4E") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
        
        
    if len(message.command) == 2 and message.command[1] in ["premium"]:
        buttons = [[
                    InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ', user_id=int(1232136108))
                  ],[
                    InlineKeyboardButton('‚ùå ·¥Ñ ü·¥èÍú±·¥á ‚ùå', callback_data='close_data')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=(SUBSCRIPTION),
            caption=script.PREPLANS_TXT.format(message.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return  
    data = message.command[1]
    if data.split("-", 1)[0] == "Lucy":
        user_id = int(data.split("-", 1)[1])
        vj = await referal_add_user(user_id, message.from_user.id)
        if vj:
            await message.reply(f"<b>You have joined using the referral link of user with ID {user_id}\n\nSend /start again to use the bot</b>")
            num_referrals = await get_referal_users_count(user_id)
            await client.send_message(chat_id = user_id, text = "<b>{} start the bot with your referral link\n\nTotal Referals - {}</b>".format(message.from_user.mention, num_referrals))
            if num_referrals == REFERAL_COUNT:
                time = REFERAL_PREMEIUM_TIME       
                seconds = await get_seconds(time)
                if seconds > 0:
                    expiry_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
                    user_data = {"id": user_id, "expiry_time": expiry_time} 
                    await db.update_user(user_data)  # Use the update_user method to update or insert user data
                    await delete_all_referal_users(user_id)
                    await client.send_message(chat_id = user_id, text = "<b>You Have Successfully Completed Total Referal.\n\nYou Added In Premium For {}</b>".format(REFERAL_PREMEIUM_TIME))
                    return 
        else:
            buttons =[[
                    InlineKeyboardButton('‚òÜ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚òÜ', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üí∏ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è üí∏', callback_data="shortlink_info"),
                    InlineKeyboardButton('‚Ä¢ Íú±·¥ú·¥©·¥©·¥è Ä·¥õ ‚Ä¢', callback_data='group_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                ],[
                    InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="premium_info")
                  ]]
            reply_markup = InlineKeyboardMarkup(buttons)
            m=await message.reply_sticker("CAACAgUAAxkBAAECQNBmEPRJUuLrUDvpzQwsvs0KE1w5jgACcAQAAkdoOVaYU-q7wXAETB4E") 
            await asyncio.sleep(1)
            await m.delete()
            await message.reply_photo(
                photo=random.choice(PICS),
                caption=script.START_TXT.format(message.from_user.mention, temp.U_NAME, temp.B_NAME),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
            return 
    try:
        pre, file_id = data.split('_', 1)
    except:
        file_id = data
        pre = ""
    if data.split("-", 1)[0] == "BATCH":
        sts = await message.reply("<b>Please wait...</b>")
        file_id = data.split("-", 1)[1]
        msgs = BATCH_FILES.get(file_id)
        if not msgs:
            file = await client.download_media(file_id)
            try: 
                with open(file) as file_data:
                    msgs=json.loads(file_data.read())
            except:
                await sts.edit("FAILED")
                return await client.send_message(LOG_CHANNEL, "UNABLE TO OPEN FILE.")
            os.remove(file)
            BATCH_FILES[file_id] = msgs
        for msg in msgs:
            title = msg.get("title")
            size=get_size(int(msg.get("size", 0)))
            f_caption=msg.get("caption", "")
            if BATCH_FILE_CAPTION:
                try:
                    f_caption=BATCH_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{title}"
            try:
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton('‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è Ä Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ', callback_data=f'generate_stream_link:{file_id}'),
                            ],
                            [
                                InlineKeyboardButton('‚òÜ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ‚òÜ', url=f'https://t.me/requestbox1official') #Don't change anything without contacting me @LazyDeveloperr
                            ]
                        ]
                    )
                )
            except FloodWait as e:
                await asyncio.sleep(e.x)
                logger.warning(f"Floodwait of {e.x} sec.")
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton('‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è Ä Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ', callback_data=f'generate_stream_link:{file_id}'),
                            ],
                            [
                                InlineKeyboardButton('‚òÜ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ‚òÜ', url=f'https://t.me/rb1bots') #Don't change anything without contacting me @LazyDeveloperr
                            ]
                        ]
                    )
                )
            except Exception as e:
                logger.warning(e, exc_info=True)
                continue
            await asyncio.sleep(1) 
        await sts.delete()
        return
    
    elif data.split("-", 1)[0] == "DSTORE":
        sts = await message.reply("<b>Please wait...</b>")
        b_string = data.split("-", 1)[1]
        decoded = (base64.urlsafe_b64decode(b_string + "=" * (-len(b_string) % 4))).decode("ascii")
        try:
            f_msg_id, l_msg_id, f_chat_id, protect = decoded.split("_", 3)
        except:
            f_msg_id, l_msg_id, f_chat_id = decoded.split("_", 2)
            protect = "/pbatch" if PROTECT_CONTENT else "batch"
        diff = int(l_msg_id) - int(f_msg_id)
        async for msg in client.iter_messages(int(f_chat_id), int(l_msg_id), int(f_msg_id)):
            if msg.media:
                media = getattr(msg, msg.media.value)
                if BATCH_FILE_CAPTION:
                    try:
                        f_caption=BATCH_FILE_CAPTION.format(file_name=getattr(media, 'file_name', ''), file_size=getattr(media, 'file_size', ''), file_caption=getattr(msg, 'caption', ''))
                    except Exception as e:
                        logger.exception(e)
                        f_caption = getattr(msg, 'caption', '')
                else:
                    media = getattr(msg, msg.media.value)
                    file_name = getattr(media, 'file_name', '')
                    f_caption = getattr(msg, 'caption', file_name)
                try:
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            elif msg.empty:
                continue
            else:
                try:
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            await asyncio.sleep(1) 
        return await sts.delete()

    elif data.split("-", 1)[0] == "verify":
        userid = data.split("-", 2)[1]
        token = data.split("-", 3)[2]
        if str(message.from_user.id) != str(userid):
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=True
            )
        is_valid = await check_token(client, userid, token)
        if is_valid == True:
            await message.reply_text(
                text=f"<b>Hey {message.from_user.mention}, You are successfully verified !\nNow you have unlimited access for all movies till today midnight.</b>",
                protect_content=True
            )
            await verify_user(client, userid, token)
        else:
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=True
            )
    if data.startswith("sendfiles"):
        protect_content=True
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        chat_id = int("-" + file_id.split("-")[1])
        userid = message.from_user.id if message.from_user else None
        g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=allfiles_{file_id}")
        k = await client.send_message(chat_id=message.from_user.id,text=f"<b>ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚ÄºÔ∏è …¢·¥á·¥õ ·¥Ä ü ü Íú∞…™ ü·¥áÍú± …™…¥ ·¥Ä Íú±…™…¥…¢ ü·¥á  ü…™…¥·¥ã ‚ÄºÔ∏è\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n</b>", reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                    ], [
                        InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                    ], [
                        InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="seeplans")                        
                    ]
                ]
            )
        )
        await asyncio.sleep(300)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    
    elif data.startswith("short"):
        protect_content=True
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"        
        user_id = message.from_user.id
        chat_id = temp.SHORT.get(user_id)
        files_ = await get_file_details(file_id)
        files = files_[0]
        g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
        k = await client.send_message(
            chat_id=user_id,
            text=f"<b>ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• Íú∞…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è @rb1official</b>",
            reply_markup=InlineKeyboardMarkup(
                [[
                    InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                ], [
                    InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                ], [
                    InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="seeplans")
                ]]
            )
        )
        await asyncio.sleep(600)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    elif data.startswith("all"):
        protect_content=True
        user_id = message.from_user.id
        files = temp.GETALL.get(file_id)
        if not files:
            return await message.reply('<b><i>…¥·¥è Íú±·¥ú·¥Ñ ú Íú∞…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !</b></i>')
        filesarr = []
        for file in files:
            file_id = file.file_id
            files_ = await get_file_details(file_id)
            files1 = files_[0]
            title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))
            size=get_size(files1.file_size)
            f_caption=files1.caption
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))}"

            if not await check_verification(client, message.from_user.id) and VERIFY == True:
                btn = [[
                    InlineKeyboardButton("‚ôªÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
                ],[
                    InlineKeyboardButton("‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ÅâÔ∏è", url=HOWTOVERIFY)
                ]]
                await message.reply_text(
                    text="<b>üëã  ú·¥á è {message.from_user.mention},  è·¥è·¥ú' Ä·¥á ·¥Ä Ä·¥á Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö ‚úÖ\n\n…¥·¥è·¥°  è·¥è·¥ú'·¥†·¥á ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ…™ ü ü …¥·¥áx·¥õ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ üéâ</b>",
                    protect_content=True,
                    reply_markup=InlineKeyboardMarkup(btn)
                )
                return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                caption=f_caption,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(
            [
             [
              InlineKeyboardButton('‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è Ä Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ', callback_data=f'generate_stream_link:{file_id}'),
             ],
             [
              InlineKeyboardButton('‚òÜ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ‚òÜ', url=f'https://t.me/requestbox1official') #Don't change anything without contacting me @sewxiy
             ]
            ]
        )
    )
            filesarr.append(msg)
        k = await client.send_message(chat_id = message.from_user.id, text=f"<b>‚ùóÔ∏è <u>…™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥õ</u> ‚ùóÔ∏è</b>\n\n<b>·¥õ ú·¥áÍú±·¥á ·¥†…™·¥Ö·¥á·¥èÍú± / Íú∞…™ ü·¥áÍú± ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥</b> <b><u>10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> </b><b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±).</b>\n\n<b><i>üìå ·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥áÍú±·¥á ·¥†…™·¥Ö·¥á·¥èÍú± / Íú∞…™ ü·¥áÍú± ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á.</i></b>")
        await asyncio.sleep(600)
        for x in filesarr:
            await x.delete()
        await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥èÍú± / Íú∞…™ ü·¥áÍú± ·¥Ä Ä·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    elif data.startswith("files"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"        
        user_id = message.from_user.id
        if temp.SHORT.get(user_id)==None:
            return await message.reply_text(text="<b>Please Search Again in Group</b>")
        else:
            chat_id = temp.SHORT.get(user_id)
        settings = await get_settings(chat_id)
        if not await db.has_premium_access(user_id) and settings['is_shortlink']: #Don't change anything without my permission @CoderluffyTG
            files_ = await get_file_details(file_id)
            files = files_[0]
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
            k = await client.send_message(chat_id=message.from_user.id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• Íú∞…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è @rb1official", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                        ], [
                            InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                        ], [
                            InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="seeplans")                            
                        ]
                    ]
                )
            )
            await asyncio.sleep(600)
            await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
            return
    user = message.from_user.id
    files_ = await get_file_details(file_id)           
    if not files_:
        pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
        try:
            if not await check_verification(client, message.from_user.id) and VERIFY == True:
                btn = [[
                    InlineKeyboardButton("‚ôªÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
                ],[
                    InlineKeyboardButton("‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ÅâÔ∏è", url=HOWTOVERIFY)
                ]]
                await message.reply_text(
                    text="<b>üëã  ú·¥á è ·¥õ ú·¥á Ä·¥á,\n\nüìå <u> è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö ·¥õ·¥è·¥Ö·¥Ä è, ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥†·¥á Ä…™Íú∞ è ·¥Ä…¥·¥Ö …¢·¥á·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ…™ ü ü …¥·¥áx·¥õ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥</u>.</b>",
                    protect_content=True,
                    reply_markup=InlineKeyboardMarkup(btn)
                )
                return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(
            [
             [
              InlineKeyboardButton('‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è Ä Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ', callback_data=f'generate_stream_link:{file_id}'),
             ],
             [
              InlineKeyboardButton('‚òÜ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ‚òÜ', url=f'https://t.me/rb1official') #Don't change anything without contacting me @LazyDeveloperr
             ]
            ]
        )
    )
            filetype = msg.media
            file = getattr(msg, filetype.value)
            title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), file.file_name.split()))
            size=get_size(file.file_size)
            f_caption = f"<code>{title}</code>"
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='')
                except:
                    return
            await msg.edit_caption(f_caption)
            btn = [[
                InlineKeyboardButton("‚ùó …¢·¥á·¥õ Íú∞…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
            ]]
            k = await client.send_message(chat_id = message.from_user.id, text=f"<b>‚ùóÔ∏è <u>…™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥õ</u> ‚ùóÔ∏è</b>\n\n<b>·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥</b> <b><u>10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> </b><b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±).</b>\n\n<b><i>üìå ·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á.</i></b>")
            await asyncio.sleep(600)
            await msg.delete()
            await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!\n\n·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á üëá</b>",reply_markup=InlineKeyboardMarkup(btn))
            return
        except:
            pass
        return await message.reply('…¥·¥è Íú±·¥ú·¥Ñ ú Íú∞…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !')
    files = files_[0]
    title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))
    size=get_size(files.file_size)
    f_caption=files.caption
    if CUSTOM_FILE_CAPTION:
        try:
            f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
        except Exception as e:
            logger.exception(e)
            f_caption=f_caption
    if f_caption is None:
        f_caption = f" {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))}"

    if not await check_verification(client, message.from_user.id) and VERIFY == True:
        btn = [[
            InlineKeyboardButton("‚ôªÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
        ],[
            InlineKeyboardButton("‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ÅâÔ∏è", url=HOWTOVERIFY)
        ]]
        await message.reply_text(
            text="<b>üëã  ú·¥á è ·¥õ ú·¥á Ä·¥á,\n\nüìå <u> è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö ·¥õ·¥è·¥Ö·¥Ä è, ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥†·¥á Ä…™Íú∞ è ·¥Ä…¥·¥Ö …¢·¥á·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ…™ ü ü …¥·¥áx·¥õ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥</u>.</b>",
            protect_content=True,
            reply_markup=InlineKeyboardMarkup(btn)
        )
        return
    msg = await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        protect_content=True if pre == 'filep' else False,
        reply_markup=InlineKeyboardMarkup(
            [
             [
              InlineKeyboardButton('‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è Ä Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ', callback_data=f'generate_stream_link:{file_id}'),
             ],
             [
              InlineKeyboardButton('‚òÜ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ‚òÜ', url=f'https://t.me/rb1official') #Don't change anything without contacting me @sewxiy
             ]
            ]
        )
    )
    btn = [[
        InlineKeyboardButton("‚ùó …¢·¥á·¥õ Íú∞…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
    ]]
    k = await client.send_message(chat_id = message.from_user.id, text=f"<b>‚ùóÔ∏è <u>…™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥õ</u> ‚ùóÔ∏è</b>\n\n<b>·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥</b> <b><u>10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> </b><b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±).</b>\n\n<b><i>üìå ·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á.</i></b>")
    await asyncio.sleep(600)
    await msg.delete()
    await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!\n\n·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á üëá</b>",reply_markup=InlineKeyboardMarkup(btn))
    return  

@Client.on_message(filters.command('channel') & filters.user(ADMINS))
async def channel_info(bot, message):
           
    """Send basic information of channel"""
    if isinstance(CHANNELS, (int, str)):
        channels = [CHANNELS]
    elif isinstance(CHANNELS, list):
        channels = CHANNELS
    else:
        raise ValueError("·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ è·¥ò·¥á ·¥èÍú∞ ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±.")

    text = 'üìë **…™…¥·¥Ö·¥áx·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± / …¢ Ä·¥è·¥ú·¥òÍú±  ü…™Íú±·¥õ :**\n'
    for channel in channels:
        chat = await bot.get_chat(channel)
        if chat.username:
            text += '\n@' + chat.username
        else:
            text += '\n' + chat.title or chat.first_name

    text += f'\n\n**·¥õ·¥è·¥õ·¥Ä ü :** {len(CHANNELS)}'

    if len(text) < 4096:
        await message.reply(text)
    else:
        file = 'Indexed channels.txt'
        with open(file, 'w') as f:
            f.write(text)
        await message.reply_document(file)
        os.remove(file)


@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('LUCY BOT.LOG')
    except Exception as e:
        await message.reply(str(e))

@Client.on_message(filters.command('delete') & filters.user(ADMINS))
async def delete(bot, message):
    """Delete file from database"""
    reply = message.reply_to_message
    if reply and reply.media:
        msg = await message.reply("·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú±…™…¥…¢...‚è≥", quote=True)
    else:
        await message.reply(' Ä·¥á·¥ò ü è ·¥õ·¥è Íú∞…™ ü·¥á ·¥°…™·¥õ ú /delete ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á Íú∞ Ä·¥è·¥ç ·¥Ö ô.', quote=True)
        return

    for file_type in ("document", "video", "audio"):
        media = getattr(reply, file_type, None)
        if media is not None:
            break
    else:
        await msg.edit('·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö Íú∞…™ ü·¥á Íú∞·¥è Ä·¥ç·¥Ä·¥õ.')
        return
    
    file_id, file_ref = unpack_new_file_id(media.file_id)

    result = await Media.collection.delete_one({
        '_id': file_id,
    })
    if result.deleted_count:
        await msg.edit('Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö ô ‚úÖ')
    else:
        file_name = re.sub(r"(_|\-|\.|\+)", " ", str(media.file_name))
        result = await Media.collection.delete_many({
            'file_name': file_name,
            'file_size': media.file_size,
            'mime_type': media.mime_type
            })
        if result.deleted_count:
            await msg.edit('Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö ô ‚úÖ')
        else:
            # files indexed before https://github.com/EvamariaTG/EvaMaria/commit/f3d2a1bcb155faf44178e5d7a685a1b533e714bf#diff-86b613edf1748372103e94cacff3b578b36b698ef9c16817bb98fe9ef22fb669R39 
            # have original file name.
            result = await Media.collection.delete_many({
                'file_name': media.file_name,
                'file_size': media.file_size,
                'mime_type': media.mime_type
            })
            if result.deleted_count:
                await msg.edit('Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö ô ‚úÖ')
            else:
                await msg.edit('Íú∞…™ ü·¥á …™Íú± …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö ô ‚ùå')


@Client.on_message(filters.command('deleteall') & filters.user(ADMINS))
async def delete_all_index(bot, message):
    await message.reply_text(
        '·¥õ ú…™Íú± ·¥°…™ ü ü ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü  è·¥è·¥ú Ä …™…¥·¥Ö·¥áx·¥á·¥Ö Íú∞…™ ü·¥áÍú± !\n·¥Ö·¥è  è·¥è·¥ú Íú±·¥õ…™ ü ü ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á ?',
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‚ö†Ô∏è  è·¥áÍú± ‚ö†Ô∏è", callback_data="autofilter_delete"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå …¥·¥è ‚ùå", callback_data="close_data"
                    )
                ],
            ]
        ),
        quote=True,
    )


@Client.on_callback_query(filters.regex(r'^autofilter_delete'))
async def delete_all_index_confirm(bot, message):
    await Media.collection.drop()
    await message.answer('·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è :  ú·¥ò')
    await message.message.edit('Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä ü ü …™…¥·¥Ö·¥áx·¥á·¥Ö Íú∞…™ ü·¥áÍú± ‚úÖ')


@Client.on_message(filters.command('settings'))
async def settings(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥.\n·¥úÍú±·¥á /connect {message.chat.id} …™…¥ ·¥ò·¥ç.")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™'·¥ç ·¥ò Ä·¥áÍú±·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò !!", quote=True)
                return
        else:
            await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥ò !", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return
    
    settings = await get_settings(grp_id)

    try:
        if settings['max_btn']:
            settings = await get_settings(grp_id)
    except KeyError:
        await save_group_settings(grp_id, 'max_btn', False)
        settings = await get_settings(grp_id)
    if 'is_shortlink' not in settings.keys():
        await save_group_settings(grp_id, 'is_shortlink', False)
    else:
        pass

    if settings is not None:
        buttons = [        
                [
                InlineKeyboardButton(
                    ' Ä·¥áÍú±·¥ú ü·¥õ ·¥ò·¥Ä…¢·¥á',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    ' ô·¥ú·¥õ·¥õ·¥è…¥' if settings["button"] else '·¥õ·¥áx·¥õ',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú∞…™ ü·¥á Íú±·¥á…¥·¥Ö ·¥ç·¥è·¥Ö·¥á',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    'Íú±·¥õ·¥Ä Ä·¥õ' if settings["botpm"] else '·¥Ä·¥ú·¥õ·¥è',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú∞…™ ü·¥á Íú±·¥á·¥Ñ·¥ú Ä·¥á',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["file_secure"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '…™·¥ç·¥Ö ô ·¥ò·¥èÍú±·¥õ·¥á Ä',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["imdb"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú±·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["spell_check"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥çÍú±…¢',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["welcome"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["auto_delete"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥Ä·¥ú·¥õ·¥è Íú∞…™ ü·¥õ·¥á Ä',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["auto_ffilter"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥ç·¥Äx  ô·¥ú·¥õ·¥õ·¥è…¥Íú±',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '10' if settings["max_btn"] else f'{MAX_B_TN}',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["is_shortlink"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton('‚áã ·¥Ñ ü·¥èÍú±·¥á Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú ‚áã', 
                                     callback_data='close_data'
                                     )
            ]
        ]
        

        btn = [[
                InlineKeyboardButton("üë§ ·¥è·¥ò·¥á…¥ …™…¥ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ üë§", callback_data=f"opnsetpm#{grp_id}")
              ],[
                InlineKeyboardButton("üë• ·¥è·¥ò·¥á…¥  ú·¥á Ä·¥á üë•", callback_data=f"opnsetgrp#{grp_id}")
              ]]

        reply_markup = InlineKeyboardMarkup(buttons)
        if chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            await message.reply_text(
                text="<b>·¥° ú·¥á Ä·¥á ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥è·¥ò·¥á…¥ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú ? ‚öôÔ∏è</b>",
                reply_markup=InlineKeyboardMarkup(btn),
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )
        else:
            await message.reply_text(
                text=f"<b>·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä {title} ·¥ÄÍú±  è·¥è·¥ú ·¥°…™Íú± ú ‚öô</b>",
                reply_markup=reply_markup,
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )



@Client.on_message(filters.command('set_template'))
async def save_template(client, message):
    sts = await message.reply("·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á...")
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥.\n·¥úÍú±·¥á /connect {message.chat.id} …™…¥ ·¥ò·¥ç.")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™'·¥ç ·¥ò Ä·¥áÍú±·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò !!", quote=True)
                return
        else:
            await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥ò !", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return

    if len(message.command) < 2:
        return await sts.edit("…¥·¥è …™…¥·¥ò·¥ú·¥õ !")
    template = message.text.split(" ", 1)[1]
    await save_group_settings(grp_id, 'template', template)
    await sts.edit(f"‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á Íú∞·¥è Ä <code>{title}</code> ·¥õ·¥è\n\n{template}")


@Client.on_message((filters.command(["request", "Request"]) | filters.regex("#request") | filters.regex("#Request")) & filters.group)
async def requests(bot, message):
    if REQST_CHANNEL is None or SUPPORT_CHAT_ID is None: return # Must add REQST_CHANNEL and SUPPORT_CHAT_ID to use this feature
    if message.reply_to_message and SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.reply_to_message.text
        try:
            if REQST_CHANNEL is not None:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.reply_to_message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è : Íú±·¥Ä Ä·¥õ ú·¥Ä·¥ã # Ä·¥áQ·¥ú·¥áÍú±·¥õ ô·¥èx1‚Ñ¢</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.reply_to_message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è : Íú±·¥Ä Ä·¥õ ú·¥Ä·¥ã # Ä·¥áQ·¥ú·¥áÍú±·¥õ ô·¥èx1‚Ñ¢</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥úÍú±·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç 3 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú±].  Ä·¥á«´·¥ú·¥áÍú±·¥õÍú± ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass
        
    elif SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.text
        keywords = ["#request", "/request", "#Request", "/Request"]
        for keyword in keywords:
            if keyword in content:
                content = content.replace(keyword, "")
        try:
            if REQST_CHANNEL is not None and len(content) >= 3:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n¬©Ô∏è ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è : Íú±·¥Ä Ä·¥õ ú·¥Ä·¥ã # Ä·¥áQ·¥ú·¥áÍú±·¥õ ô·¥èx1‚Ñ¢</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n¬©Ô∏è ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è : Íú±·¥Ä Ä·¥õ ú·¥Ä·¥ã # Ä·¥áQ·¥ú·¥áÍú±·¥õ ô·¥èx1‚Ñ¢</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥úÍú±·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç 3 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú±].  Ä·¥á«´·¥ú·¥áÍú±·¥õÍú± ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass
     
    elif SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.text
        keywords = ["#request", "/request", "#Request", "/Request"]
        for keyword in keywords:
            if keyword in content:
                content = content.replace(keyword, "")
        try:
            if REQST_CHANNEL is not None and len(content) >= 3:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n¬©Ô∏è ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è : Íú±·¥Ä Ä·¥õ ú·¥Ä·¥ã # Ä·¥áQ·¥ú·¥áÍú±·¥õ ô·¥èx1‚Ñ¢</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n¬©Ô∏è ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è : Íú±·¥Ä Ä·¥õ ú·¥Ä·¥ã # Ä·¥áQ·¥ú·¥áÍú±·¥õ ô·¥èx1‚Ñ¢</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥úÍú±·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç 3 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú±].  Ä·¥á«´·¥ú·¥áÍú±·¥õÍú± ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass

    else:
        success = False
    
    if success:
        '''if isinstance(REQST_CHANNEL, (int, str)):
            channels = [REQST_CHANNEL]
        elif isinstance(REQST_CHANNEL, list):
            channels = REQST_CHANNEL
        for channel in channels:
            chat = await bot.get_chat(channel)
        #chat = int(chat)'''
        link = await bot.create_chat_invite_link(int(REQST_CHANNEL))
        btn = [[
                InlineKeyboardButton('·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url=link.invite_link),
                InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{reported_post.link}")
              ]]
        await message.reply_text("<b> è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä Íú±·¥è·¥ç·¥á ·¥õ…™·¥ç·¥á.\n\n·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü Íú∞…™ ÄÍú±·¥õ & ·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ.</b>", reply_markup=InlineKeyboardMarkup(btn))
    
@Client.on_message(filters.command("send") & filters.user(ADMINS))
async def send_msg(bot, message):
    if message.reply_to_message:
        target_id = message.text.split(" ", 1)[1]
        out = "Users Saved In DB Are:\n\n"
        success = False
        try:
            user = await bot.get_users(target_id)
            users = await db.get_all_users()
            async for usr in users:
                out += f"{usr['id']}"
                out += '\n'
            if str(user.id) in str(out):
                await message.reply_to_message.copy(int(user.id))
                success = True
            else:
                success = False
            if success:
                await message.reply_text(f"<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥á…¥·¥õ ·¥õ·¥è {user.mention}.</b>")
            else:
                await message.reply_text("<b>·¥õ ú…™Íú± ·¥úÍú±·¥á Ä ·¥Ö…™·¥Ö…¥'·¥õ Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú…™Íú±  ô·¥è·¥õ  è·¥á·¥õ !</b>")
        except Exception as e:
            await message.reply_text(f"<b>Error: {e}</b>")
    else:
        await message.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ÄÍú± ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥úÍú±…™…¥…¢ ·¥õ ú·¥á ·¥õ·¥Ä Ä…¢·¥á·¥õ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö. Íú∞·¥è Ä ·¥á…¢:  /send ·¥úÍú±·¥á Ä…™·¥Ö</b>")

@Client.on_message(filters.command("deletefiles") & filters.user(ADMINS))

async def deletemultiplefiles(bot, message):

    chat_type = message.chat.type

    if chat_type != enums.ChatType.PRIVATE:

        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention},\n·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è…¥'·¥õ ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !\n…™·¥õ ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± …™…¥ ·¥ç è ·¥ò·¥ç.</b>")

    else:

        pass

    try:

        keyword = message.text.split(" ", 1)[1]

    except:

        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention},\n…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ã·¥á è·¥°·¥è Ä·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á Íú∞…™ ü·¥áÍú±.</b>")

    btn = [[

       InlineKeyboardButton("‚ö†Ô∏è  è·¥áÍú±, ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á ‚ö†Ô∏è", callback_data=f"killfilesdq#{keyword}")

       ],[

       InlineKeyboardButton("‚ùå …¥·¥è, ·¥Ä ô·¥è Ä·¥õ ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ ‚ùå", callback_data="close_data")

    ]]

    await message.reply_text(

        text="<b>·¥Ä Ä·¥á  è·¥è·¥ú Íú±·¥ú Ä·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á ?\n…¥·¥è·¥õ·¥á : ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ú ü·¥Ö  ô·¥á ·¥Ä ·¥Ö·¥áÍú±·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥†·¥á ·¥Ö·¥áÍú±…™·¥Ñ…™·¥è…¥.</b>",

        reply_markup=InlineKeyboardMarkup(btn),

        parse_mode=enums.ParseMode.HTML

    )

@Client.on_message(filters.command("set_shortlink"))
async def shortlink(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥õ ú…™Íú± ·¥Ä…¢·¥Ä…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b> è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ·¥è ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !\n·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± Íú∞·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥Íú±.</b>")
    else:
        pass
    try:
        command, shortlink_url, api = data.split(" ")
    except:
        return await message.reply_text("<b>·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !\n…¢…™·¥†·¥á ·¥ç·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥°·¥á ôÍú±…™·¥õ·¥á ·¥Ä…¥·¥Ö ·¥Ä·¥ò…™.\n\nÍú∞·¥è Ä·¥ç·¥Ä·¥õ : <code>/set_shortlink shareus.io c8dacdff6e91a8e4b4f093fdb4d8ae31bc273c1a</code>")
    reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
    shortlink_url = re.sub(r"https?://?", "", shortlink_url)
    shortlink_url = re.sub(r"[:/]", "", shortlink_url)
    await save_group_settings(grpid, 'shortlink', shortlink_url)
    await save_group_settings(grpid, 'shortlink_api', api)
    await save_group_settings(grpid, 'is_shortlink', True)
    await reply.edit_text(f"<b>‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú∞·¥è Ä <code>{title}</code>.\n\nÍú± ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{shortlink_url}</code>\nÍú± ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ä·¥ò…™ : <code>{api}</code></b>")

@Client.on_message(filters.command("shortlinkoff") & filters.user(ADMINS))
async def offshortlink(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    await save_group_settings(grpid, 'is_shortlink', False)
    ENABLE_SHORTLINK = False
    return await message.reply_text("Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.")
    
@Client.on_message(filters.command("shortlinkon") & filters.user(ADMINS))
async def onshortlink(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    await save_group_settings(grpid, 'is_shortlink', True)
    ENABLE_SHORTLINK = True
    return await message.reply_text("Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö.")


@Client.on_message(filters.command("shortlink_info"))
async def ginfo(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>{message.from_user.mention},\n\n·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.</b>")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    chat_id=message.chat.id
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
#     if 'shortlink' in settings.keys():
#         su = settings['shortlink']
#         sa = settings['shortlink_api']
#     else:
#         return await message.reply_text("<b>Shortener Url Not Connected\n\nYou can Connect Using /shortlink command</b>")
#     if 'tutorial' in settings.keys():
#         st = settings['tutorial']
#     else:
#         return await message.reply_text("<b>Tutorial Link Not Connected\n\nYou can Connect Using /set_tutorial command</b>")
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        settings = await get_settings(chat_id) #fetching settings for group
        if 'shortlink' in settings.keys() and 'tutorial' in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            st = settings['tutorial']
            return await message.reply_text(f"<b><u>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Íú±·¥õ·¥Ä·¥õ·¥úÍú±<u> üìä\n\n·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{su}</code>\n\n·¥Ä·¥ò…™ : <code>{sa}</code>\n\n·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : {st}</b>", disable_web_page_preview=True)
        elif 'shortlink' in settings.keys() and 'tutorial' not in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            return await message.reply_text(f"<b><u>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Íú±·¥õ·¥Ä·¥õ·¥úÍú±<u> üìä\n\n·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{su}</code>\n\n·¥Ä·¥ò…™ : <code>{sa}</code>\n\n·¥úÍú±·¥á /set_tutorial ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è Íú±·¥á·¥õ  è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü.")
        elif 'shortlink' not in settings.keys() and 'tutorial' in settings.keys():
            st = settings['tutorial']
            return await message.reply_text(f"<b>·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : <code>{st}</code>\n\n·¥úÍú±·¥á  /shortlink  ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ·¥õ·¥è  ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ   è·¥è·¥ú Ä  Íú± ú·¥è Ä·¥õ…¥·¥á Ä</b>")
        else:
            return await message.reply_text("Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥Ä…¥·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö.\n\n·¥Ñ ú·¥á·¥Ñ·¥ã /set_tutorial  ·¥Ä…¥·¥Ö  /set_shortlink  ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")

@Client.on_message(filters.command("donate"))
async def donate_command(client, message):
    buttons = [
        [
            InlineKeyboardButton("‚Ä¢ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ‚Ä¢ ", url="https://graph.org/file/f880ed039bd0a8b504369.jpg"),
            InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", url="https://t.me/helpsarthak_bot")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(text=script.DONATION_TXT, reply_markup=reply_markup)

@Client.on_message(filters.command("help"))
async def help_command(client, message):
    buttons = [
        [
            InlineKeyboardButton("‚Ä¢ ·¥è·¥ò·¥á…¥ …™…¥ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ‚Ä¢", url="https://t.me/requestbox1_bot?start=help"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(text=script.HELP_TXT, reply_markup=reply_markup)

@Client.on_message(filters.command("support"))
async def support_command(client, message):
    buttons = [
        [
            InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/requestbox1"),
            InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url="https://t.me/requestbox1official")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(text=script.SUPPORT_TXT, reply_markup=reply_markup)

@Client.on_message(filters.command("set_tutorial"))
async def settutorial(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return
    else:
        pass
    if len(message.command) == 1:
        return await message.reply("<b>…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.\n\n·¥úÍú±·¥Ä…¢·¥á : /set_tutorial <code>https://t.me/rb1official/36</code></b>")
    elif len(message.command) == 2:
        reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
        tutorial = message.command[1]
        await save_group_settings(grpid, 'tutorial', tutorial)
        await save_group_settings(grpid, 'is_tutorial', True)
        await reply.edit_text(f"<b>‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü\n\n è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò : {title}\n\n è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : <code>{tutorial}</code></b>")
    else:
        return await message.reply("<b> è·¥è·¥ú ·¥á…¥·¥õ·¥á Ä·¥á·¥Ö …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ !\n·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ : /set_tutorial <code>https://t.me/rb1official/35</code></b>")

@Client.on_message(filters.command("remove_tutorial"))
async def removetutorial(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return
    else:
        pass
    reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
    await save_group_settings(grpid, 'is_tutorial', False)
    await reply.edit_text(f"<b>Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ‚úÖ</b>")

@Client.on_message(filters.command("restart") & filters.user(ADMINS))
async def stop_button(bot, message):
    msg = await bot.send_message(text="<b><i> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢</i></b>", chat_id=message.chat.id)       
    await asyncio.sleep(3)
    await msg.edit("<b><i><u> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö</u> ‚úÖ</i></b>")
    os.execl(sys.executable, sys.executable, *sys.argv)
