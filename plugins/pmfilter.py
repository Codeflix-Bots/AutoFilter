# Owneer @Codeflix_Bots

import asyncio
import re
import ast
import math
import random
import pytz
from datetime import datetime, timedelta, date, time
lock = asyncio.Lock()
from database.users_chats_db import db
from pyrogram.errors.exceptions.bad_request_400 import MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty
from Script import script
import pyrogram
from database.connections_mdb import active_connection, all_connections, delete_connection, if_active, make_active, \
    make_inactive
from info import *
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from utils import get_size, is_req_subscribed, get_poster, search_gagala, temp, get_settings, save_group_settings, get_shortlink, get_tutorial, send_all, get_cap
from database.users_chats_db import db
from database.ia_filterdb import Media, get_file_details, get_search_results, get_bad_files
from database.filters_mdb import (
    del_all,
    find_filter,
    get_filters,
)
from database.gfilters_mdb import (
    find_gfilter,
    get_gfilters,
    del_allg
)
import logging
from urllib.parse import quote_plus
from util.file_properties import get_name, get_hash, get_media_file_size

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

import requests
import string
import tracemalloc
# Enable tracemalloc
tracemalloc.start()

TIMEZONE = "Asia/Kolkata"
BUTTON = {}
BUTTONS = {}
FRESH = {}
BUTTONS0 = {}
BUTTONS1 = {}
BUTTONS2 = {}
SPELL_CHECK = {}
FILTER_MODE = {}
REACTIONS = ["üî•", "‚ù§Ô∏è", "üòç", "‚ö°"]
# ENABLE_SHORTLINK = ""

def generate_random_alphanumeric():
    """Generate a random 8-letter alphanumeric string."""
    characters = string.ascii_letters + string.digits
    random_chars = ''.join(random.choice(characters) for _ in range(8))
    return random_chars
  
def get_shortlink_sync(url):
    try:
        rget = requests.get(f"https://{STREAM_SITE}/api?api={STREAM_API}&url={url}&alias={generate_random_alphanumeric()}")
        rjson = rget.json()
        if rjson["status"] == "success" or rget.status_code == 200:
            return rjson["shortenedUrl"]
        else:
            return url
    except Exception as e:
        print(f"Error in get_shortlink_sync: {e}")
        return url

async def get_shortlink(url):
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, get_shortlink_sync, url)


@Client.on_message(filters.command('autofilter') & filters.user(ADMINS))
async def fil_mod(client, message):
    mode_on = ["yes", "on", "true"]
    mode_of = ["no", "off", "false"]

    try:
        args = message.text.split(None, 1)[1].lower()
    except:
        return await message.reply("**…™…¥·¥Ñ·¥è·¥ç·¥ò·¥á·¥õ·¥á…¥·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...**")

    m = await message.reply("**s·¥á·¥õ·¥õ…™…¥…¢.../**")

    if args in mode_on:
        FILTER_MODE[str(message.chat.id)] = "True"
        await m.edit("**·¥Ä·¥ú·¥õ·¥è“ì…™ ü·¥õ·¥á Ä ·¥á…¥·¥Ä ô ü·¥á·¥Ö**")

    elif args in mode_of:
        FILTER_MODE[str(message.chat.id)] = "False"
        await m.edit("**·¥Ä·¥ú·¥õ·¥è“ì…™ ü·¥õ·¥á Ä ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö**")
    else:
        await m.edit("·¥ús·¥á :- /autofilter on ·¥è Ä /autofilter off")


@Client.on_message((filters.group) & filters.text & filters.incoming)
async def give_filter(client, message):
    await global_filters(client, message)
    group_id = message.chat.id
    name = message.text
    await message.react(emoji=random.choice(REACTIONS))
    keywords = await get_filters(group_id)
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_filter(group_id, keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            await message.reply_text(reply_text, disable_web_page_preview=True)
                        else:
                            button = eval(btn)
                            await message.reply_text(
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button)
                            )
                    elif btn == "[]":
                        await message.reply_cached_media(
                            fileid,
                            caption=reply_text or ""
                        )
                    else:
                        button = eval(btn)
                        await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button)
                        )
                except Exception as e:
                    print(e)
                break

    else:
        if FILTER_MODE.get(str(message.chat.id)) == "False":
            return
        else:
            await auto_filter(client, message)

@Client.on_message(filters.group & filters.text & filters.incoming)
async def give_filter(client, message):
    if message.chat.id != SUPPORT_CHAT_ID:
        manual = await manual_filters(client, message)
        if manual == False:
            settings = await get_settings(message.chat.id)
            try:
                if settings['auto_ffilter']:
                    await auto_filter(client, message)
            except KeyError:
                grpid = await active_connection(str(message.from_user.id))
                await save_group_settings(grpid, 'auto_ffilter', True)
                settings = await get_settings(message.chat.id)
                if settings['auto_ffilter']:
                    await auto_filter(client, message) 
    else: #a better logic to avoid repeated lines of code in auto_filter function
        search = message.text
        temp_files, temp_offset, total_results = await get_search_results(chat_id=message.chat.id, query=search.lower(), offset=0, filter=True)
        if total_results == 0:
            return
        else:
            return await message.reply_text(
                text=f"<b>{message.from_user.mention},</b>\n\n({str(total_results)})  Ä·¥ás·¥ú ü·¥õ ·¥Ä Ä·¥á Íú∞·¥è·¥ú…¥·¥Ö …™…¥ ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á Íú∞·¥è Ä  è·¥è·¥ú Ä s·¥á·¥Ä Ä·¥Ñ ú [{search}]",
                parse_mode=enums.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(
                        [[
                            InlineKeyboardButton('‚úß ·¥õ·¥Ä·¥ã·¥á ·¥ç·¥è·¥†…™·¥á Íú∞ Ä·¥è·¥ç  ú·¥á Ä·¥á ‚úß', url ='https://telegram.me/movie7xchat')
                        ]]
                    )
                )

@Client.on_message(filters.private & filters.text & filters.incoming)
async def pm_text(bot, message):
    content = message.text
    user = message.from_user.first_name
    user_id = message.from_user.id
    if content.startswith("/") or content.startswith("#"): return  # ignore commands and hashtags
    if user_id in ADMINS: return # ignore admins
    await message.reply_text(
         text=f"<b> ú·¥á è {user} ,\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ …¢·¥á·¥õ ·¥ç·¥è·¥†…™·¥ás Íú∞ Ä·¥è·¥ç  ú·¥á Ä·¥á.  Ä·¥á«´·¥ú·¥ás·¥õ …™·¥õ …™…¥ ·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á …¢ Ä·¥è·¥ú·¥ò</a> ·¥è Ä ·¥Ñ ü…™·¥Ñ·¥ã  Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥á Ä·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° üëá</b>",   
         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úß ·¥õ·¥Ä·¥ã·¥á ·¥ç·¥è·¥†…™·¥á Íú∞ Ä·¥è·¥ç  ú·¥á Ä·¥á ‚úß", url=f"https://t.me/requestbox1")]])
    )
    await bot.send_message(
        chat_id=LOG_CHANNEL,
        text=f"<b>#pm_msge\n\nN·¥Ä·¥ç·¥á : {user}\n\nID : {user_id}\n\nM·¥áss·¥Ä…¢·¥á : {content}</b>"
    )

@Client.on_callback_query(filters.regex(r"^next"))
async def next_page(bot, query):
    ident, req, key, offset = query.data.split("_")
    curr_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer(script.ALRT_TXT.format(query.from_user.first_name), show_alert=True)
    try:
        offset = int(offset)
    except:
        offset = 0
    if BUTTONS.get(key)!=None:
        search = BUTTONS.get(key)
    else:
        search = FRESH.get(key)
    if not search:
        await query.answer(script.OLD_ALRT_TXT.format(query.from_user.first_name),show_alert=True)
        return

    files, n_offset, total = await get_search_results(query.message.chat.id, search, offset=offset, filter=True)
    try:
        n_offset = int(n_offset)
    except:
        n_offset = 0

    if not files:
        return
    temp.GETALL[key] = files
    temp.SHORT[query.from_user.id] = query.message.chat.id
    settings = await get_settings(query.message.chat.id)
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"üìÅ {get_size(file.file_size)} ‚ñ∑ {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}", callback_data=f'{pre}#{file.file_id}'
                ),
            ]
            for file in files
        ]


        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://t.me/OtakuFlix_Network/4639"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    else:
        btn = []
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://t.me/https://graph.org/REQUESTBOX1-TELEGRAM-PLANS-04-15-2"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    try:
        if settings['max_btn']:
            if 0 < offset <= 10:
                off_set = 0
            elif offset == 0:
                off_set = None
            else:
                off_set = offset - 10
            if n_offset == 0:
                btn.append(
                    [InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"), InlineKeyboardButton(f"{math.ceil(int(offset)/10)+1} / {math.ceil(total/10)}", callback_data="pages")]
                )
            elif off_set is None:
                btn.append([InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(f"{math.ceil(int(offset)/10)+1} / {math.ceil(total/10)}", callback_data="pages"), InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data=f"next_{req}_{key}_{n_offset}")])
            else:
                btn.append(
                    [
                        InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                        InlineKeyboardButton(f"{math.ceil(int(offset)/10)+1} / {math.ceil(total/10)}", callback_data="pages"),
                        InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data=f"next_{req}_{key}_{n_offset}")
                    ],
                )
        else:
            if 0 < offset <= int(MAX_B_TN):
                off_set = 0
            elif offset == 0:
                off_set = None
            else:
                off_set = offset - int(MAX_B_TN)
            if n_offset == 0:
                btn.append(
                    [InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"), InlineKeyboardButton(f"{math.ceil(int(offset)/int(MAX_B_TN))+1} / {math.ceil(total/int(MAX_B_TN))}", callback_data="pages")]
                )
            elif off_set is None:
                btn.append([InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(f"{math.ceil(int(offset)/int(MAX_B_TN))+1} / {math.ceil(total/int(MAX_B_TN))}", callback_data="pages"), InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data=f"next_{req}_{key}_{n_offset}")])
            else:
                btn.append(
                    [
                        InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                        InlineKeyboardButton(f"{math.ceil(int(offset)/int(MAX_B_TN))+1} / {math.ceil(total/int(MAX_B_TN))}", callback_data="pages"),
                        InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data=f"next_{req}_{key}_{n_offset}")
                    ],
                )
    except KeyError:
        await save_group_settings(query.message.chat.id, 'max_btn', True)
        if 0 < offset <= 10:
            off_set = 0
        elif offset == 0:
            off_set = None
        else:
            off_set = offset - 10
        if n_offset == 0:
            btn.append(
                [InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"), InlineKeyboardButton(f"{math.ceil(int(offset)/10)+1} / {math.ceil(total/10)}", callback_data="pages")]
            )
        elif off_set is None:
            btn.append([InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(f"{math.ceil(int(offset)/10)+1} / {math.ceil(total/10)}", callback_data="pages"), InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data=f"next_{req}_{key}_{n_offset}")])
        else:
            btn.append(
                [
                    InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                    InlineKeyboardButton(f"{math.ceil(int(offset)/10)+1} / {math.ceil(total/10)}", callback_data="pages"),
                    InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data=f"next_{req}_{key}_{n_offset}")
                ],
            )
    if not settings["button"]:
        cur_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
        time_difference = timedelta(hours=cur_time.hour, minutes=cur_time.minute, seconds=(cur_time.second+(cur_time.microsecond/1000000))) - timedelta(hours=curr_time.hour, minutes=curr_time.minute, seconds=(curr_time.second+(curr_time.microsecond/1000000)))
        remaining_seconds = "{:.2f}".format(time_difference.total_seconds())
        cap = await get_cap(settings, remaining_seconds, files, query, total, search)
        try:
            await query.message.edit_text(text=cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)
        except MessageNotModified:
            pass
    else:
        try:
            await query.edit_message_reply_markup(
                reply_markup=InlineKeyboardMarkup(btn)
            )
        except MessageNotModified:
            pass
    await query.answer()

@Client.on_callback_query(filters.regex(r"^spol"))
async def advantage_spoll_choker(bot, query):
    _, user, movie_ = query.data.split('#')
    movies = SPELL_CHECK.get(query.message.reply_to_message.id)
    if not movies:
        return await query.answer(script.OLD_ALRT_TXT.format(query.from_user.first_name), show_alert=True)
    if int(user) != 0 and query.from_user.id != int(user):
        return await query.answer(script.ALRT_TXT.format(query.from_user.first_name), show_alert=True)
    if movie_ == "close_spellcheck":
        return await query.message.delete()
    movie = movies[(int(movie_))]
    movie = re.sub(r"[:\-]", " ", movie)
    movie = re.sub(r"\s+", " ", movie).strip()
    await query.answer(script.TOP_ALRT_MSG)
    gl = await global_filters(bot, query.message, text=movie)
    if gl == False:
        k = await manual_filters(bot, query.message, text=movie)
        if k == False:
            files, offset, total_results = await get_search_results(query.message.chat.id, movie, offset=0, filter=True)
            if files:
                k = (movie, files, offset, total_results)
                await auto_filter(bot, query, k)
            else:
                reqstr1 = query.from_user.id if query.from_user else 0
                reqstr = await bot.get_users(reqstr1)
                if NO_RESULTS_MSG:
                    await bot.send_message(chat_id=LOG_CHANNEL, text=(script.NORSLTS.format(reqstr.id, reqstr.mention, movie)))
                k = await query.message.edit(script.MVE_NT_FND)
                await asyncio.sleep(10)
                await k.delete()
#Qualities 
@Client.on_callback_query(filters.regex(r"^qualities#"))
async def qualities_cb_handler(client: Client, query: CallbackQuery):

    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è {query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ,\n Ä·¥á«´·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    _, key = query.data.split("#")
    # if BUTTONS.get(key+"1")!=None:
    #     search = BUTTONS.get(key+"1")
    # else:
    #     search = BUTTONS.get(key)
    #     BUTTONS[key+"1"] = search
    search = FRESH.get(key)
    search = search.replace(' ', '_')
    btn = []
    for i in range(0, len(QUALITIES)-1, 2):
        btn.append([
            InlineKeyboardButton(
                text=QUALITIES[i].title(),
                callback_data=f"fq#{QUALITIES[i].lower()}#{key}"
            ),
            InlineKeyboardButton(
                text=QUALITIES[i+1].title(),
                callback_data=f"fq#{QUALITIES[i+1].lower()}#{key}"
            ),
        ])

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="‚áä Íú±·¥á ü·¥á·¥Ñ·¥õ «´·¥ú·¥Ä ü…™·¥õ è ‚áä", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Ü≠", callback_data=f"fq#homepage#{key}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
 

@Client.on_callback_query(filters.regex(r"^fq#"))
async def filter_qualities_cb_handler(client: Client, query: CallbackQuery):
    _, qual, key = query.data.split("#")
    curr_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
    search = FRESH.get(key)
    search = search.replace("_", " ")
    baal = qual in search
    if baal:
        search = search.replace(qual, "")
    else:
        search = search
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è {query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ,\n Ä·¥á«´·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    if qual != "homepage":
        search = f"{search} {qual}" 
    BUTTONS[key] = search

    files, offset, total_results = await get_search_results(chat_id, search, offset=0, filter=True)
    if not files:
        await query.answer("…¥·¥è Íú∞…™ ü·¥áÍú± ·¥°·¥á Ä·¥á Íú∞·¥è·¥ú…¥·¥Ö", show_alert=1)
        return
    temp.GETALL[key] = files
    settings = await get_settings(message.chat.id)
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"üìÅ {get_size(file.file_size)} ‚ñ∑ {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}", callback_data=f'{pre}#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://graph.org/REQUESTBOX1-TELEGRAM-PLANS-04-15-2"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    else:
        btn = []
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://graph.org/REQUESTBOX1-TELEGRAM-PLANS-04-15-2"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    if offset != "":
        try:
            if settings['max_btn']:
                btn.append(
                    [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚ãü",callback_data=f"next_{req}_{key}_{offset}")]
                )
    
            else:
                btn.append(
                    [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/int(MAX_B_TN))}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚ãü",callback_data=f"next_{req}_{key}_{offset}")]
                )
        except KeyError:
            await save_group_settings(query.message.chat.id, 'max_btn', True)
            btn.append(
                [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚ãü",callback_data=f"next_{req}_{key}_{offset}")]
            )
    else:
        btn.append(
            [InlineKeyboardButton(text="‚Ü≠ …¥·¥è ·¥ç·¥è Ä·¥á ·¥ò·¥Ä…¢·¥áÍú± ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚Ü≠",callback_data="pages")]
        )
    
    if not settings["button"]:
        cur_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
        time_difference = timedelta(hours=cur_time.hour, minutes=cur_time.minute, seconds=(cur_time.second+(cur_time.microsecond/1000000))) - timedelta(hours=curr_time.hour, minutes=curr_time.minute, seconds=(curr_time.second+(curr_time.microsecond/1000000)))
        remaining_seconds = "{:.2f}".format(time_difference.total_seconds())
        cap = await get_cap(settings, remaining_seconds, files, query, total_results, search)
        try:
            await query.message.edit_text(text=cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)
        except MessageNotModified:
            pass
    else:
        try:
            await query.edit_message_reply_markup(
                reply_markup=InlineKeyboardMarkup(btn)
            )
        except MessageNotModified:
            pass
    await query.answer()

#languages

@Client.on_callback_query(filters.regex(r"^languages#"))
async def languages_cb_handler(client: Client, query: CallbackQuery):
    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è {query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ,\n Ä·¥á«´·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    _, key = query.data.split("#")
    # if BUTTONS.get(key+"1")!=None:
    #     search = BUTTONS.get(key+"1")
    # else:
    #     search = BUTTONS.get(key)
    #     BUTTONS[key+"1"] = search
    search = FRESH.get(key)
    search = search.replace(' ', '_')
    btn = []
    for i in range(0, len(LANGUAGES)-1, 2):
        btn.append([
            InlineKeyboardButton(
                text=LANGUAGES[i].title(),
                callback_data=f"fl#{LANGUAGES[i].lower()}#{key}"
            ),
            InlineKeyboardButton(
                text=LANGUAGES[i+1].title(),
                callback_data=f"fl#{LANGUAGES[i+1].lower()}#{key}"
            ),
        ])

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="‚áä Íú±·¥á ü·¥á·¥Ñ·¥õ  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á ‚áä", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Äã‚Ü≠", callback_data=f"fl#homepage#{key}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    

@Client.on_callback_query(filters.regex(r"^fl#"))
async def filter_languages_cb_handler(client: Client, query: CallbackQuery):
    _, lang, key = query.data.split("#")
    curr_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
    search = FRESH.get(key)
    search = search.replace("_", " ")
    baal = lang in search
    if baal:
        search = search.replace(lang, "")
    else:
        search = search
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è {query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ,\n Ä·¥á«´·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    if lang != "homepage":
        search = f"{search} {lang}" 
    BUTTONS[key] = search

    files, offset, total_results = await get_search_results(chat_id, search, offset=0, filter=True)
    if not files:
        await query.answer("…¥·¥è Íú∞…™ ü·¥áÍú± ·¥°·¥á Ä·¥á Íú∞·¥è·¥ú…¥·¥Ö", show_alert=1)
        return
    temp.GETALL[key] = files
    settings = await get_settings(message.chat.id)
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"üìÅ {get_size(file.file_size)} ‚ñ∑ {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}", callback_data=f'{pre}#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://graph.org/REQUESTBOX1-TELEGRAM-PLANS-04-15-2"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    else:
        btn = []
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://graph.org/REQUESTBOX1-TELEGRAM-PLANS-04-15-2"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    if offset != "":
        try:
            if settings['max_btn']:
                btn.append(
                    [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚ãü",callback_data=f"next_{req}_{key}_{offset}")]
                )
    
            else:
                btn.append(
                    [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/int(MAX_B_TN))}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚ãü",callback_data=f"next_{req}_{key}_{offset}")]
                )
        except KeyError:
            await save_group_settings(query.message.chat.id, 'max_btn', True)
            btn.append(
                [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚ãü",callback_data=f"next_{req}_{key}_{offset}")]
            )
    else:
        btn.append(
            [InlineKeyboardButton(text="‚Ü≠ …¥·¥è ·¥ç·¥è Ä·¥á ·¥ò·¥Ä…¢·¥áÍú± ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚Ü≠",callback_data="pages")]
        )
    
    if not settings["button"]:
        cur_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
        time_difference = timedelta(hours=cur_time.hour, minutes=cur_time.minute, seconds=(cur_time.second+(cur_time.microsecond/1000000))) - timedelta(hours=curr_time.hour, minutes=curr_time.minute, seconds=(curr_time.second+(curr_time.microsecond/1000000)))
        remaining_seconds = "{:.2f}".format(time_difference.total_seconds())
        cap = await get_cap(settings, remaining_seconds, files, query, total_results, search)
        try:
            await query.message.edit_text(text=cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)
        except MessageNotModified:
            pass
    else:
        try:
            await query.edit_message_reply_markup(
                reply_markup=InlineKeyboardMarkup(btn)
            )
        except MessageNotModified:
            pass
    await query.answer()
    
    
    
@Client.on_callback_query(filters.regex(r"^seasons#"))
async def seasons_cb_handler(client: Client, query: CallbackQuery):
    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è {query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ,\n Ä·¥á«´·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    _, key = query.data.split("#")
    # if BUTTONS.get(key+"2")!=None:
    #     search = BUTTONS.get(key+"2")
    # else:
    #     search = BUTTONS.get(key)
    #     BUTTONS[key+"2"] = search
    search = FRESH.get(key)
    BUTTONS[key] = None
    search = search.replace(' ', '_')
    btn = []
    for i in range(0, len(SEASONS)-1, 2):
        btn.append([
            InlineKeyboardButton(
                text=SEASONS[i].title(),
                callback_data=f"fs#{SEASONS[i].lower()}#{key}"
            ),
            InlineKeyboardButton(
                text=SEASONS[i+1].title(),
                callback_data=f"fs#{SEASONS[i+1].lower()}#{key}"
            ),
        ])

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="‚áä Íú±·¥á ü·¥á·¥Ñ·¥õ Íú±·¥á·¥ÄÍú±·¥è…¥ ‚áä", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Äã‚Ü≠", callback_data=f"next_{req}_{key}_{offset}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))


@Client.on_callback_query(filters.regex(r"^fs#"))
async def filter_seasons_cb_handler(client: Client, query: CallbackQuery):
    _, seas, key = query.data.split("#")
    curr_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
    search = FRESH.get(key)
    search = search.replace("_", " ")
    sea = ""
    season_search = ["s01","s02", "s03", "s04", "s05", "s06", "s07", "s08", "s09", "s10", "season 01","season 02","season 03","season 04","season 05","season 06","season 07","season 08","season 09","season 10", "season 1","season 2","season 3","season 4","season 5","season 6","season 7","season 8","season 9"]
    for x in range (len(season_search)):
        if season_search[x] in search:
            sea = season_search[x]
            break
    if sea:
        search = search.replace(sea, "")
    else:
        search = search
    
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è {query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ,\n Ä·¥á«´·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    
    searchagn = search
    search1 = search
    search2 = search
    search = f"{search} {seas}"
    BUTTONS0[key] = search
    
    files, _, _ = await get_search_results(chat_id, search, max_results=10)
    files = [file for file in files if re.search(seas, file.file_name, re.IGNORECASE)]
    
    seas1 = "s01" if seas == "season 1" else "s02" if seas == "season 2" else "s03" if seas == "season 3" else "s04" if seas == "season 4" else "s05" if seas == "season 5" else "s06" if seas == "season 6" else "s07" if seas == "season 7" else "s08" if seas == "season 8" else "s09" if seas == "season 9" else "s10" if seas == "season 10" else ""
    search1 = f"{search1} {seas1}"
    BUTTONS1[key] = search1
    files1, _, _ = await get_search_results(chat_id, search1, max_results=10)
    files1 = [file for file in files1 if re.search(seas1, file.file_name, re.IGNORECASE)]
    
    if files1:
        files.extend(files1)
    
    seas2 = "season 01" if seas == "season 1" else "season 02" if seas == "season 2" else "season 03" if seas == "season 3" else "season 04" if seas == "season 4" else "season 05" if seas == "season 5" else "season 06" if seas == "season 6" else "season 07" if seas == "season 7" else "season 08" if seas == "season 8" else "season 09" if seas == "season 9" else "s010"
    search2 = f"{search2} {seas2}"
    BUTTONS2[key] = search2
    files2, _, _ = await get_search_results(chat_id, search2, max_results=10)
    files2 = [file for file in files2 if re.search(seas2, file.file_name, re.IGNORECASE)]

    if files2:
        files.extend(files2)
        
    if not files:
        await query.answer("…¥·¥è Íú∞…™ ü·¥áÍú± ·¥°·¥á Ä·¥á Íú∞·¥è·¥ú…¥·¥Ö", show_alert=1)
        return
    temp.GETALL[key] = files
    settings = await get_settings(message.chat.id)
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"üìÅ {get_size(file.file_size)} ‚ñ∑ {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}", callback_data=f'{pre}#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, [
            InlineKeyboardButton("Íú±·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}"),
            InlineKeyboardButton("Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¢·¥Ä…™…¥", callback_data=f"seasons#{key}")
        ])
    else:
        btn = []
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://t.me/OtakuFlix_Network/4639"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])
    
    offset = 0

    btn.append([
            InlineKeyboardButton(
                text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Äã‚Ü≠",
                callback_data=f"next_{req}_{key}_{offset}"
                ),
    ])
    
    if not settings["button"]:
        cur_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
        time_difference = timedelta(hours=cur_time.hour, minutes=cur_time.minute, seconds=(cur_time.second+(cur_time.microsecond/1000000))) - timedelta(hours=curr_time.hour, minutes=curr_time.minute, seconds=(curr_time.second+(curr_time.microsecond/1000000)))
        remaining_seconds = "{:.2f}".format(time_difference.total_seconds())
        total_results = len(files)
        cap = await get_cap(settings, remaining_seconds, files, query, total_results, search)
        try:
            await query.message.edit_text(text=cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)
        except MessageNotModified:
            pass
    else:
        try:
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(btn))
        except MessageNotModified:
            pass
    await query.answer()

                
@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    lazyData = query.data
    try:
        link = await client.create_chat_invite_link(int(REQST_CHANNEL))
    except:
        pass
    if query.data == "close_data":
        await query.message.delete()
    elif query.data == "gfiltersdeleteallconfirm":
        await del_allg(query.message, 'gfilters')
        await query.answer("·¥Ö·¥è…¥·¥á !")
        return
    elif query.data == "gfiltersdeleteallcancel": 
        await query.message.reply_to_message.delete()
        await query.message.delete()
        await query.answer("·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö !")
        return
    elif query.data == "delallconfirm":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            grpid = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.message.edit_text("M·¥Ä·¥ã·¥á s·¥ú Ä·¥á I'·¥ç ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò!!", quote=True)
                    return await query.answer(MSG_ALRT)
            else:
                await query.message.edit_text(
                    "I'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥òs !\nC ú·¥á·¥Ñ·¥ã /connections ·¥è Ä ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥òs.",
                    quote=True
                )
                return await query.answer(MSG_ALRT)

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return await query.answer(MSG_ALRT)

        st = await client.get_chat_member(grp_id, userid)
        if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
            await del_all(query.message, grp_id, title)
        else:
            await query.answer("Y·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á G Ä·¥è·¥ú·¥ò O·¥°…¥·¥á Ä ·¥è Ä ·¥Ä…¥ A·¥ú·¥õ ú Us·¥á Ä ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ !", show_alert=True)
    elif query.data == "delallcancel":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            await query.message.reply_to_message.delete()
            await query.message.delete()

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            st = await client.get_chat_member(grp_id, userid)
            if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
                await query.message.delete()
                try:
                    await query.message.reply_to_message.delete()
                except:
                    pass
            else:
                await query.answer("T ú·¥Ä·¥õ's …¥·¥è·¥õ “ì·¥è Ä  è·¥è·¥ú!!", show_alert=True)
    elif "groupcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        act = query.data.split(":")[2]
        hr = await client.get_chat(int(group_id))
        title = hr.title
        user_id = query.from_user.id

        if act == "":
            stat = "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ"
            cb = "connectcb"
        else:
            stat = "·¥Ö…™Íú±·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ"
            cb = "disconnect"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{stat}", callback_data=f"{cb}:{group_id}"),
             InlineKeyboardButton("·¥Ö·¥á ü·¥á·¥õ·¥á", callback_data=f"deletecb:{group_id}")],
            [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="backcb")]
        ])

        await query.message.edit_text(
            f"G Ä·¥è·¥ú·¥ò N·¥Ä·¥ç·¥á : **{title}**\nG Ä·¥è·¥ú·¥ò ID : `{group_id}`",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )
        return await query.answer(MSG_ALRT)
    elif "connectcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title

        user_id = query.from_user.id

        mkact = await make_active(str(user_id), str(group_id))

        if mkact:
            await query.message.edit_text(
                f"C·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text('S·¥è·¥ç·¥á ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!!', parse_mode=enums.ParseMode.MARKDOWN)
        return await query.answer(MSG_ALRT)
    elif "disconnect" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title
        user_id = query.from_user.id

        mkinact = await make_inactive(str(user_id))

        if mkinact:
            await query.message.edit_text(
                f"D…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text(
                f"S·¥è·¥ç·¥á ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer(MSG_ALRT)
    elif "deletecb" in query.data:
        await query.answer()

        user_id = query.from_user.id
        group_id = query.data.split(":")[1]

        delcon = await delete_connection(str(user_id), str(group_id))

        if delcon:
            await query.message.edit_text(
                "S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ !"
            )
        else:
            await query.message.edit_text(
                f"S·¥è·¥ç·¥á ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer(MSG_ALRT)
    elif query.data == "backcb":
        await query.answer()

        userid = query.from_user.id

        groupids = await all_connections(str(userid))
        if groupids is None:
            await query.message.edit_text(
                "T ú·¥á Ä·¥á ·¥Ä Ä·¥á …¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s!! C·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è s·¥è·¥ç·¥á …¢ Ä·¥è·¥ú·¥òs “ì…™ Äs·¥õ.",
            )
            return await query.answer(MSG_ALRT)
        buttons = []
        for groupid in groupids:
            try:
                ttl = await client.get_chat(int(groupid))
                title = ttl.title
                active = await if_active(str(userid), str(groupid))
                act = " - ACTIVE" if active else ""
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{title}{act}", callback_data=f"groupcb:{groupid}:{act}"
                        )
                    ]
                )
            except:
                pass
        if buttons:
            await query.message.edit_text(
                "Y·¥è·¥ú Ä ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥Ö·¥á·¥õ·¥Ä…™ üs ;\n\n",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    elif "gfilteralert" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_gfilter('gfilters', keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert, show_alert=True)
    elif "alertmessage" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_filter(grp_id, keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert, show_alert=True)
        
    if query.data.startswith("file"):
        clicked = query.from_user.id
        try:
            typed = query.from_user.id
        except:
            typed = query.from_user.id
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('N·¥è s·¥ú·¥Ñ ú “ì…™ ü·¥á ·¥áx…™s·¥õ.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = files.caption
        settings = await get_settings(query.message.chat.id)
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title,
                                                       file_size='' if size is None else size,
                                                       file_caption='' if f_caption is None else f_caption)
            except Exception as e:
                logger.exception(e)
            f_caption = f_caption
        if f_caption is None:
            f_caption = f"{files.file_name}"

        try:
            if not await db.has_premium_access(clicked) and settings['is_shortlink']: #Don't change Anything without my permission @CodeluffyTG
                if clicked == query.from_user.id:
                    temp.SHORT[clicked] = query.message.chat.id
                    await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start=short_{file_id}")
                    return
                else:
                    await query.answer(f"H·¥á è {query.from_user.first_name},\nT ú…™s Is N·¥è·¥õ Y·¥è·¥ú Ä M·¥è·¥†…™·¥á R·¥á«´·¥ú·¥ás·¥õ.\nR·¥á«´·¥ú·¥ás·¥õ Y·¥è·¥ú Ä's !", show_alert=True)
            else:
                if clicked == query.from_user.id:
                    await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start={ident}_{file_id}")
                    return
                else:
                    await query.answer(f"H·¥á è {query.from_user.first_name},\nT ú…™s Is N·¥è·¥õ Y·¥è·¥ú Ä M·¥è·¥†…™·¥á R·¥á«´·¥ú·¥ás·¥õ.\nR·¥á«´·¥ú·¥ás·¥õ Y·¥è·¥ú Ä's !", show_alert=True)
        except UserIsBlocked:
            await query.answer('U…¥ ô ü·¥è·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ ·¥ç·¥Ä ú…¥ !', show_alert=True)
        except PeerIdInvalid:
            await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start={ident}_{file_id}")
        except Exception as e:
            await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start={ident}_{file_id}")
            
    elif query.data.startswith("sendfiles"):
        clicked = query.from_user.id
        ident, key = query.data.split("#")
        settings = await get_settings(query.message.chat.id)
        try:
            if not await db.has_premium_access(clicked) and settings['is_shortlink']: # Don't Change anything without my permission @CoderluffyTG
                await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start=sendfiles1_{key}")
                return
            else:
                await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start=allfiles_{key}")
                return
        except UserIsBlocked:
            await query.answer('U…¥ ô ü·¥è·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ ·¥ç·¥Ä ú…¥ !', show_alert=True)
        except PeerIdInvalid:
            await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start=sendfiles3_{key}")
        except Exception as e:
            logger.exception(e)
            await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start=sendfiles4_{key}")
    
    elif query.data.startswith("del"):
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('N·¥è s·¥ú·¥Ñ ú “ì…™ ü·¥á ·¥áx…™s·¥õ.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = files.caption
        settings = await get_settings(query.message.chat.id)
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title,
                                                       file_size='' if size is None else size,
                                                       file_caption='' if f_caption is None else f_caption)
            except Exception as e:
                logger.exception(e)
            f_caption = f_caption
        if f_caption is None:
            f_caption = f"{files.file_name}"
        await query.answer(url=f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
    
    elif query.data.startswith("checksub"):
        if AUTH_CHANNEL and not await is_req_subscribed(client, query):
            await query.answer("J·¥è…™…¥ ·¥è·¥ú Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ç·¥Ä ú…¥! üòí", show_alert=True)
            return
        ident, kk, file_id = query.data.split("#")
        await query.answer(url=f"https://t.me/{temp.U_NAME}?start={kk}_{file_id}")
    
    elif query.data == "pages":
        await query.answer()
    
    elif query.data.startswith("send_fsall"):
        temp_var, ident, key, offset = query.data.split("#")
        search = BUTTON0.get(key)
        if not search:
            await query.answer(script.OLD_ALRT_TXT.format(query.from_user.first_name),show_alert=True)
            return
        files, n_offset, total = await get_search_results(query.message.chat.id, search, offset=int(offset), filter=True)
        await send_all(client, query.from_user.id, files, ident, query.message.chat.id, query.from_user.first_name, query)
        search = BUTTONS1.get(key)
        files, n_offset, total = await get_search_results(query.message.chat.id, search, offset=int(offset), filter=True)
        await send_all(client, query.from_user.id, files, ident, query.message.chat.id, query.from_user.first_name, query)
        search = BUTTONS2.get(key)
        files, n_offset, total = await get_search_results(query.message.chat.id, search, offset=int(offset), filter=True)
        await send_all(client, query.from_user.id, files, ident, query.message.chat.id, query.from_user.first_name, query)
        await query.answer(f" ú·¥á è {query.from_user.first_name}, ·¥Ä ü ü Íú∞…™ ü·¥áÍú± ·¥è…¥ ·¥õ ú…™Íú± ·¥ò·¥Ä…¢·¥á  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥á…¥·¥õ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥õ·¥è  è·¥è·¥ú  ô è ·¥Ö·¥ç !", show_alert=True)
        
    elif query.data.startswith("send_fall"):
        temp_var, ident, key, offset = query.data.split("#")
        if BUTTONS.get(key)!=None:
            search = BUTTONS.get(key)
        else:
            search = FRESH.get(key)
        if not search:
            await query.answer(script.OLD_ALRT_TXT.format(query.from_user.first_name),show_alert=True)
            return
        files, n_offset, total = await get_search_results(query.message.chat.id, search, offset=int(offset), filter=True)
        await send_all(client, query.from_user.id, files, ident, query.message.chat.id, query.from_user.first_name, query)
        await query.answer(f" ú·¥á è {query.from_user.first_name}, ·¥Ä ü ü Íú∞…™ ü·¥áÍú± ·¥è…¥ ·¥õ ú…™Íú± ·¥ò·¥Ä…¢·¥á  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥á…¥·¥õ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥õ·¥è  è·¥è·¥ú  ô è ·¥Ö·¥ç !", show_alert=True)
        
    elif query.data.startswith("killfilesdq"):
        ident, keyword = query.data.split("#")
        #await query.message.edit_text(f"<b>Fetching Files for your query {keyword} on DB... Please wait...</b>")
        files, total = await get_bad_files(keyword)
        await query.message.edit_text("<b>Íú∞…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™·¥è…¥ ·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± ·¥°…™ ü ü Íú±·¥õ·¥Ä Ä·¥õ …™…¥ 5 Íú±·¥á·¥Ñ·¥è…¥·¥ÖÍú± !</b>")
        await asyncio.sleep(5)
        deleted = 0
        async with lock:
            try:
                for file in files:
                    file_ids = file.file_id
                    file_name = file.file_name
                    result = await Media.collection.delete_one({
                        '_id': file_ids,
                    })
                    if result.deleted_count:
                        logger.info(f'Íú∞…™ ü·¥á Íú∞·¥è·¥ú…¥·¥Ö Íú∞·¥è Ä  è·¥è·¥ú Ä «´·¥ú·¥á Ä è {keyword}! Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {file_name} Íú∞ Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á.')
                    deleted += 1
                    if deleted % 20 == 0:
                        await query.message.edit_text(f"<b>·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö Íú∞·¥è Ä ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ Íú∞…™ ü·¥áÍú± Íú∞ Ä·¥è·¥ç ·¥Ö ô. Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {str(deleted)} Íú∞…™ ü·¥áÍú± Íú∞ Ä·¥è·¥ç ·¥Ö ô Íú∞·¥è Ä  è·¥è·¥ú Ä «´·¥ú·¥á Ä è {keyword} !\n\n·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
            except Exception as e:
                logger.exception(e)
                await query.message.edit_text(f'Error: {e}')
            else:
                await query.message.edit_text(f"<b>·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö Íú∞·¥è Ä Íú∞…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ·¥Ä·¥õ…™·¥è…¥ !\n\nÍú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {str(deleted)} Íú∞…™ ü·¥áÍú± Íú∞ Ä·¥è·¥ç ·¥Ö ô Íú∞·¥è Ä  è·¥è·¥ú Ä «´·¥ú·¥á Ä è {keyword}.</b>")
    
    elif query.data.startswith("opnsetgrp"):
        ident, grp_id = query.data.split("#")
        userid = query.from_user.id if query.from_user else None
        st = await client.get_chat_member(grp_id, userid)
        if (
                st.status != enums.ChatMemberStatus.ADMINISTRATOR
                and st.status != enums.ChatMemberStatus.OWNER
                and str(userid) not in ADMINS
        ):
            await query.answer(" è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õÍú± ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™Íú± !", show_alert=True)
            return
        title = query.message.chat.title
        settings = await get_settings(grp_id)
        if settings is not None:
            buttons = [
                [
                    InlineKeyboardButton(' Ä·¥áÍú±·¥ú ü·¥õ ·¥ò·¥Ä…¢·¥á',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                    InlineKeyboardButton(' ô·¥ú·¥õ·¥õ·¥è…¥' if settings["button"] else '·¥õ·¥áx·¥õ',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú∞…™ ü·¥á Íú±·¥á…¥·¥Ö ·¥ç·¥è·¥Ö·¥á', callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}'),
                    InlineKeyboardButton('Íú±·¥õ·¥Ä Ä·¥õ' if settings["botpm"] else '·¥Ä·¥ú·¥õ·¥è',
                                         callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú∞…™ ü·¥á Íú±·¥á·¥Ñ·¥ú Ä·¥á',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["file_secure"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('…™·¥ç·¥Ö ô ·¥ò·¥èÍú±·¥õ·¥á Ä', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["imdb"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú±·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["spell_check"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥çÍú±…¢', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["welcome"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á',
                                         callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["auto_delete"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è Íú∞…™ ü·¥õ·¥á Ä',
                                         callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["auto_ffilter"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥ç·¥Äx  ô·¥ú·¥õ·¥õ·¥è…¥Íú±',
                                         callback_data=f'setgs#max_btn#{settings["max_btn"]}#{str(grp_id)}'),
                    InlineKeyboardButton('10' if settings["max_btn"] else f'{MAX_B_TN}',
                                         callback_data=f'setgs#max_btn#{settings["max_btn"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã',
                                         callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["is_shortlink"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('‚áã ·¥Ñ ü·¥èÍú±·¥á Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú ‚áã', 
                                         callback_data='close_data'
                                         )
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=f"<b>·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä {title} ·¥ÄÍú±  è·¥è·¥ú ·¥°…™Íú± ú ‚öô</b>",
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML
            )
            await query.message.edit_reply_markup(reply_markup)
        
    elif query.data.startswith("opnsetpm"):
        ident, grp_id = query.data.split("#")
        userid = query.from_user.id if query.from_user else None
        st = await client.get_chat_member(grp_id, userid)
        if (
                st.status != enums.ChatMemberStatus.ADMINISTRATOR
                and st.status != enums.ChatMemberStatus.OWNER
                and str(userid) not in ADMINS
        ):
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)
            return
        title = query.message.chat.title
        settings = await get_settings(grp_id)
        btn2 = [[
                 InlineKeyboardButton("·¥Ñ ú·¥á·¥Ñ·¥ã ·¥ç è ·¥Ö·¥ç üó≥Ô∏è", url=f"telegram.me/{temp.U_NAME}")
               ]]
        reply_markup = InlineKeyboardMarkup(btn2)
        await query.message.edit_text(f"<b> è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s ·¥ç·¥á…¥·¥ú “ì·¥è Ä {title}  ú·¥Äs  ô·¥á·¥á…¥ s·¥á…¥·¥õ ·¥õ·¥è  è·¥è·¥ú  ô è ·¥Ö·¥ç.</b>")
        await query.message.edit_reply_markup(reply_markup)
        if settings is not None:
            buttons = [
                [
                    InlineKeyboardButton(' Ä·¥áÍú±·¥ú ü·¥õ ·¥ò·¥Ä…¢·¥á',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                    InlineKeyboardButton(' ô·¥ú·¥õ·¥õ·¥è…¥' if settings["button"] else '·¥õ·¥áx·¥õ',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú∞…™ ü·¥á Íú±·¥á…¥·¥Ö ·¥ç·¥è·¥Ö·¥á', callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}'),
                    InlineKeyboardButton('Íú±·¥õ·¥Ä Ä·¥õ' if settings["botpm"] else '·¥Ä·¥ú·¥õ·¥è',
                                         callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú∞…™ ü·¥á Íú±·¥á·¥Ñ·¥ú Ä·¥á',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["file_secure"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('…™·¥ç·¥Ö ô ·¥ò·¥èÍú±·¥õ·¥á Ä', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["imdb"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú±·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["spell_check"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥çÍú±…¢', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["welcome"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á',
                                         callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["auto_delete"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è Íú∞…™ ü·¥õ·¥á Ä',
                                         callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["auto_ffilter"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥ç·¥Äx  ô·¥ú·¥õ·¥õ·¥è…¥Íú±',
                                         callback_data=f'setgs#max_btn#{settings["max_btn"]}#{str(grp_id)}'),
                    InlineKeyboardButton('10' if settings["max_btn"] else f'{MAX_B_TN}',
                                         callback_data=f'setgs#max_btn#{settings["max_btn"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã',
                                         callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["is_shortlink"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('‚áã ·¥Ñ ü·¥èÍú±·¥á Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú ‚áã', 
                                         callback_data='close_data'
                                         )
                ]
        ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await client.send_message(
                chat_id=userid,
                text=f"<b>·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä {title} ·¥ÄÍú±  è·¥è·¥ú ·¥°…™Íú± ú ‚öô</b>",
                reply_markup=reply_markup,
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=query.message.id
            )

    elif query.data.startswith("show_option"):
        ident, from_user = query.data.split("#")
        btn = [[
                InlineKeyboardButton("‚ö†Ô∏è ·¥ú…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚ö†Ô∏è", callback_data=f"unavailable#{from_user}"),
                InlineKeyboardButton("üü¢ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö üü¢", callback_data=f"uploaded#{from_user}")
             ],[
                InlineKeyboardButton("‚ôªÔ∏è ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚ôªÔ∏è", callback_data=f"already_available#{from_user}")
              ]]
        btn2 = [[
                 InlineKeyboardButton("·¥†…™·¥á·¥° Íú±·¥õ·¥Ä·¥õ·¥úÍú±", url=f"{query.message.link}")
               ]]
        if query.from_user.id in ADMINS:
            user = await client.get_users(from_user)
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_reply_markup(reply_markup)
            await query.answer("H·¥á Ä·¥á ·¥Ä Ä·¥á ·¥õ ú·¥á ·¥è·¥ò·¥õ…™·¥è…¥s !")
        else:
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)
        
    elif query.data.startswith("unavailable"):
        ident, from_user = query.data.split("#")
        btn = [[
                InlineKeyboardButton("‚ö†Ô∏è ·¥ú…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚ö†Ô∏è", callback_data=f"unalert#{from_user}")
              ]]
        btn2 = [[
                 InlineKeyboardButton('·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url=link.invite_link),
                 InlineKeyboardButton("·¥†…™·¥á·¥° Íú±·¥õ·¥Ä·¥õ·¥úÍú±", url=f"{query.message.link}")
               ]]
        if query.from_user.id in ADMINS:
            user = await client.get_users(from_user)
            reply_markup = InlineKeyboardMarkup(btn)
            content = query.message.text
            await query.message.edit_text(f"<b><strike>{content}</strike></b>")
            await query.message.edit_reply_markup(reply_markup)
            await query.answer("S·¥á·¥õ ·¥õ·¥è U…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á !")
            try:
                await client.send_message(chat_id=int(from_user), text=f"<b>H·¥á è {user.mention}, S·¥è Ä Ä è Y·¥è·¥ú Ä  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …™s ·¥ú…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á. S·¥è ·¥è·¥ú Ä ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs ·¥Ñ·¥Ä…¥'·¥õ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õ.</b>", reply_markup=InlineKeyboardMarkup(btn2))
            except UserIsBlocked:
                await client.send_message(chat_id=int(SUPPORT_CHAT_ID), text=f"<b>H·¥á è {user.mention}, S·¥è Ä Ä è Y·¥è·¥ú Ä  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …™s ·¥ú…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á. S·¥è ·¥è·¥ú Ä ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs ·¥Ñ·¥Ä…¥'·¥õ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õ.\n\nN·¥è·¥õ·¥á: T ú…™s ·¥ç·¥áss·¥Ä…¢·¥á …™s s·¥á…¥·¥õ ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò  ô·¥á·¥Ñ·¥Ä·¥ús·¥á  è·¥è·¥ú'·¥†·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ. T·¥è s·¥á…¥·¥Ö ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  è·¥è·¥ú Ä PM, M·¥ús·¥õ ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ.</b>", reply_markup=InlineKeyboardMarkup(btn2))
        else:
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)

    elif query.data.startswith("uploaded"):
        ident, from_user = query.data.split("#")
        btn = [[
                InlineKeyboardButton("üü¢ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö üü¢", callback_data=f"upalert#{from_user}")
              ]]
        btn2 = [[
                 InlineKeyboardButton('·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url=link.invite_link),
                 InlineKeyboardButton("·¥†…™·¥á·¥° Íú±·¥õ·¥Ä·¥õ·¥úÍú±", url=f"{query.message.link}")
               ],[
                 InlineKeyboardButton("üîç Íú±·¥á·¥Ä Ä·¥Ñ ú  ú·¥á Ä·¥á üîé", url="https://t.me/requestbox1")
               ]]
        if query.from_user.id in ADMINS:
            user = await client.get_users(from_user)
            reply_markup = InlineKeyboardMarkup(btn)
            content = query.message.text
            await query.message.edit_text(f"<b><strike>{content}</strike></b>")
            await query.message.edit_reply_markup(reply_markup)
            await query.answer("S·¥á·¥õ ·¥õ·¥è U·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö !")
            try:
                await client.send_message(chat_id=int(from_user), text=f"<b>H·¥á è {user.mention}, Y·¥è·¥ú Ä  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö  ô è ·¥è·¥ú Ä ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs. K…™…¥·¥Ö ü è s·¥á·¥Ä Ä·¥Ñ ú …™…¥ ·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò.</b>", reply_markup=InlineKeyboardMarkup(btn2))
            except UserIsBlocked:
                await client.send_message(chat_id=int(SUPPORT_CHAT_ID), text=f"<b>H·¥á è {user.mention}, Y·¥è·¥ú Ä  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö  ô è ·¥è·¥ú Ä ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs. K…™…¥·¥Ö ü è s·¥á·¥Ä Ä·¥Ñ ú …™…¥ ·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò.\n\nN·¥è·¥õ·¥á: T ú…™s ·¥ç·¥áss·¥Ä…¢·¥á …™s s·¥á…¥·¥õ ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò  ô·¥á·¥Ñ·¥Ä·¥ús·¥á  è·¥è·¥ú'·¥†·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ. T·¥è s·¥á…¥·¥Ö ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  è·¥è·¥ú Ä PM, M·¥ús·¥õ ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ.</b>", reply_markup=InlineKeyboardMarkup(btn2))
        else:
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)

    elif query.data.startswith("already_available"):
        ident, from_user = query.data.split("#")
        btn = [[
                InlineKeyboardButton("‚ôªÔ∏è ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚ôªÔ∏è", callback_data=f"alalert#{from_user}")
              ]]
        btn2 = [[
                 InlineKeyboardButton('·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url=link.invite_link),
                 InlineKeyboardButton("·¥†…™·¥á·¥° Íú±·¥õ·¥Ä·¥õ·¥úÍú±", url=f"{query.message.link}")
               ],[
                 InlineKeyboardButton("üîç Íú±·¥á·¥Ä Ä·¥Ñ ú  ú·¥á Ä·¥á üîé", url="https://t.me/requestbox1")
               ]]
        if query.from_user.id in ADMINS:
            user = await client.get_users(from_user)
            reply_markup = InlineKeyboardMarkup(btn)
            content = query.message.text
            await query.message.edit_text(f"<b><strike>{content}</strike></b>")
            await query.message.edit_reply_markup(reply_markup)
            await query.answer("S·¥á·¥õ ·¥õ·¥è A ü Ä·¥á·¥Ä·¥Ö è A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á !")
            try:
                await client.send_message(chat_id=int(from_user), text=f"<b>H·¥á è {user.mention}, Y·¥è·¥ú Ä  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥è…¥ ·¥è·¥ú Ä  ô·¥è·¥õ's ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. K…™…¥·¥Ö ü è s·¥á·¥Ä Ä·¥Ñ ú …™…¥ ·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò.</b>", reply_markup=InlineKeyboardMarkup(btn2))
            except UserIsBlocked:
                await client.send_message(chat_id=int(SUPPORT_CHAT_ID), text=f"<b>H·¥á è {user.mention}, Y·¥è·¥ú Ä  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥è…¥ ·¥è·¥ú Ä  ô·¥è·¥õ's ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. K…™…¥·¥Ö ü è s·¥á·¥Ä Ä·¥Ñ ú …™…¥ ·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò.\n\nN·¥è·¥õ·¥á: T ú…™s ·¥ç·¥áss·¥Ä…¢·¥á …™s s·¥á…¥·¥õ ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò  ô·¥á·¥Ñ·¥Ä·¥ús·¥á  è·¥è·¥ú'·¥†·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ. T·¥è s·¥á…¥·¥Ö ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  è·¥è·¥ú Ä PM, M·¥ús·¥õ ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ.</b>", reply_markup=InlineKeyboardMarkup(btn2))
        else:
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)

    elif query.data.startswith("alalert"):
        ident, from_user = query.data.split("#")
        if int(query.from_user.id) == int(from_user):
            user = await client.get_users(from_user)
            await query.answer(f"H·¥á è {user.first_name}, Y·¥è·¥ú Ä R·¥á·¥èÃ®·¥ú·¥ás·¥õ …™s A ü Ä·¥á·¥Ä·¥Ö è A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á !", show_alert=True)
        else:
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)

    elif query.data.startswith("upalert"):
        ident, from_user = query.data.split("#")
        if int(query.from_user.id) == int(from_user):
            user = await client.get_users(from_user)
            await query.answer(f"H·¥á è {user.first_name}, Y·¥è·¥ú Ä R·¥á·¥èÃ®·¥ú·¥ás·¥õ …™s U·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö !", show_alert=True)
        else:
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)
        
    elif query.data.startswith("unalert"):
        ident, from_user = query.data.split("#")
        if int(query.from_user.id) == int(from_user):
            user = await client.get_users(from_user)
            await query.answer(f"H·¥á è {user.first_name}, Y·¥è·¥ú Ä R·¥á·¥èÃ®·¥ú·¥ás·¥õ …™s U…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á !", show_alert=True)
        else:
            await query.answer("Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥Ä…¥·¥õ  Ä…™…¢·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s !", show_alert=True)

    elif lazyData.startswith("generate_stream_link"):
        _, file_id = lazyData.split(":")
        try:
            user_id = query.from_user.id
            username = query.from_user.mention 
            log_msg = await client.send_cached_media(
                chat_id=LOG_CHANNEL,
                file_id=file_id,
            )
            fileName = {quote_plus(get_name(log_msg))}
            lazy_stream = f"{URL}watch/{str(log_msg.id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"
            lazy_download = f"{URL}{str(log_msg.id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"
            hp_link = await get_shortlink(lazy_download)
            ph_link = await get_shortlink(lazy_stream)
            buttons = []
            if await db.has_premium_access(user_id):                               
                buttons = [[
                    InlineKeyboardButton("‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚òÜ", url=lazy_download),
                    InlineKeyboardButton("‚òÜ Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ", url=lazy_stream)
                ],[
                    InlineKeyboardButton('‚òÜ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ‚òÜ', url='https://t.me/codeflix_bots')
                ]]
            else:
                await query.answer("üö∏ …¥·¥è·¥õ·¥á :\n·¥Ä·¥Ö-Íú∞ Ä·¥á·¥á Íú±·¥á Ä·¥†…™·¥Ñ·¥á …™Íú± ·¥è…¥ ü è Íú∞·¥è Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á ÄÍú±.\n\n·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥ò ü·¥Ä…¥Íú±.", show_alert=True)
                await query.message.reply_text(
                text="<b>‚ÄºÔ∏è ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ?\n\n‚úÖ ·¥ò·¥ú Ä·¥Ñ ú·¥ÄÍú±·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è ·¥Ä·¥Ö-Íú∞ Ä·¥á·¥á ·¥áx·¥ò·¥á Ä…™·¥á…¥·¥Ñ·¥á.</b>",
                quote=True,
                disable_web_page_preview=True,                  
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí∏ ·¥Ñ ú·¥á·¥Ñ·¥ã·¥è·¥ú·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥Íú± üí∏", callback_data='seeplans')]]))
                buttons = [[
                    InlineKeyboardButton("‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚òÜ", url=hp_link),
                    InlineKeyboardButton("‚òÜ Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ", url=ph_link)
                ],[
                    InlineKeyboardButton('‚ùó ú·¥è·¥° ·¥õ·¥è ·¥è·¥ò·¥á…¥  ü…™…¥·¥ã‚ùó', url=STREAMHTO)
                ]]
    
            query.message.reply_markup = query.message.reply_markup or []
            query.message.reply_markup.inline_keyboard.pop(0)
            query.message.reply_markup.inline_keyboard.insert(0, buttons)
            await query.message.edit_reply_markup(InlineKeyboardMarkup(buttons))
            await log_msg.reply_text(
                    text=f"#LinkGenrated\n\nI·¥Ö : <code>{user_id}</code>\nUÍú±·¥á Ä…¥·¥Ä·¥ç·¥á : {username}\n\nN·¥Ä·¥ç·¥á : {fileName}",
                    quote=True,
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚òÜ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚òÜ", url=hp_link),
                                                        InlineKeyboardButton('‚òÜ Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥è…¥ ü…™…¥·¥á ‚òÜ', url=ph_link)]]))  
        except Exception as e:
            print(e)  # print the error message
            await query.answer(f"‚ö†Ô∏èkuch to galat hai bc \n\n{e}", show_alert=True)
            return

    # don't change anything without contacting me @cryxelys


    elif query.data == "pagesn1":
        await query.answer(text=script.PAGE_TXT, show_alert=True)

    elif query.data == "reqinfo":
        await query.answer(text=script.REQINFO, show_alert=True)

    elif query.data == "select":
        await query.answer(text=script.SELECT, show_alert=True)

    elif query.data == "sinfo":
        await query.answer(text=script.SINFO, show_alert=True)

    elif query.data == "start":
        buttons = [[
                    InlineKeyboardButton('√ó ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò √ó', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üí∏ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è üí∏', callback_data="shortlink_info"),
                    InlineKeyboardButton('‚Ä¢ Íú±·¥ú·¥©·¥©·¥è Ä·¥õ ‚Ä¢', callback_data='group_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                ],[
                    InlineKeyboardButton('‚Ä¢  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥Ös ‚Ä¢', callback_data="premium_info")
                  ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        await query.answer(MSG_ALRT)

    elif query.data == "filters":
        buttons = [[
            InlineKeyboardButton('·¥ç·¥Ä…¥·¥ú·¥Ä ü Íú∞…™ ü·¥õ·¥á Ä', callback_data='manuelfilter'),
            InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è Íú∞…™ ü·¥õ·¥á Ä', callback_data='autofilter')
        ],[
            InlineKeyboardButton('‚áá  ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('…¢ ü·¥è ô·¥Ä ü Íú∞…™ ü·¥õ·¥á ÄÍú±', callback_data='global_filters')
        ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.ALL_FILTERS.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "global_filters":
        buttons = [[
            InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', callback_data='filters')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.GFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "main":
        buttons = [[
            InlineKeyboardButton('üìï ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ', callback_data='management'),
            InlineKeyboardButton('·¥ç·¥è Ä·¥á ‚ùç', callback_data='help')
         ], [
            InlineKeyboardButton('üíÅ  ô·¥Äs…™·¥Ñ', callback_data='basic_help'),
            InlineKeyboardButton('·¥Ä…™  ú·¥á ü·¥ò üëÆ', callback_data='expert_help')
         ], [
            InlineKeyboardButton('üçπ s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info'),
            InlineKeyboardButton('·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥  üéâ', callback_data='donate')
         ], [
            InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á ‚Ä¢', callback_data='start')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id,
            query.message.id,
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.MAIN_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton('Íú∞…™ ü·¥õ·¥á ÄÍú±', callback_data='filters'),
            InlineKeyboardButton('Íú±·¥õ·¥è Ä·¥á', callback_data='store_file'),
            InlineKeyboardButton('·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ò ú', callback_data='tele')     
        ], [
            InlineKeyboardButton('Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±', callback_data='settings'),
            InlineKeyboardButton('·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ', callback_data='coct'),
            InlineKeyboardButton('·¥áx·¥õ Ä·¥Ä', callback_data='extra')
        ], [
            InlineKeyboardButton('Íú∞·¥è…¥·¥õ', callback_data='font'),
            InlineKeyboardButton('Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä', callback_data='sticker'),
            InlineKeyboardButton(' Ä·¥ú ü·¥áÍú±', callback_data='rule')
        ], [
            InlineKeyboardButton(' è·¥õ·¥õ ú·¥ú·¥ç ô', callback_data='ytthumb'),
            InlineKeyboardButton(' è·¥õ·¥†…™·¥Ö', callback_data='video'),
            InlineKeyboardButton(' è·¥õ·¥õ·¥Ä…¢Íú±', callback_data='yttags')
        ], [
            InlineKeyboardButton('·¥è·¥°…¥·¥á Ä', callback_data='mikey'),
            InlineKeyboardButton('·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥', callback_data='donate'),
            InlineKeyboardButton('…¢…™·¥õ ú·¥ú ô', callback_data='github')
        ], [
            InlineKeyboardButton('·¥ò Ä·¥á·¥†', callback_data='start'),
            InlineKeyboardButton('·¥ò·¥Ä…¢·¥á', callback_data='page'),
            InlineKeyboardButton('…¥·¥áx·¥õ', callback_data='help1')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.HELP_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "help1":
        buttons = [[
            InlineKeyboardButton('·¥ã·¥Ä…¥…¢', callback_data='kang'),
            InlineKeyboardButton(' Ä·¥á·¥ò·¥è Ä·¥õ', callback_data='report'),
            InlineKeyboardButton('…¢·¥á…¥·¥ò·¥Äss', callback_data='gen_pass')
        ], [
            InlineKeyboardButton('·¥è·¥ò·¥á…¥·¥Ä…™', callback_data='opnai'),
            InlineKeyboardButton('s·¥Ä·¥Ä·¥†…¥', callback_data='song'),
            InlineKeyboardButton('·¥ò·¥ú Ä…¢·¥á', callback_data='purge')
        ], [
            InlineKeyboardButton('·¥ò…™…¥…¢', callback_data='alive'),
            InlineKeyboardButton('·¥Ä…¥…™·¥ç·¥á', callback_data='anime'),
            InlineKeyboardButton(' Ä·¥á·¥ò·¥è', callback_data='repo')
         ], [
            InlineKeyboardButton('…¢·¥Ä·¥ç·¥ás', callback_data='games'),
            InlineKeyboardButton('·¥ç·¥ú·¥õ·¥á', callback_data='restrict'),
            InlineKeyboardButton('·¥ã…™·¥Ñ·¥ã', callback_data='kick')
        ], [
            InlineKeyboardButton('·¥äs·¥è…¥', callback_data='json'),
            InlineKeyboardButton(' ü è Ä…™·¥Ñs', callback_data='lyrics'),
            InlineKeyboardButton('s ú·¥è Ä·¥õ…¥·¥á Ä', callback_data='shortner')
         ], [
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('·¥ò·¥Ä…¢·¥á', callback_data='page'),
            InlineKeyboardButton('…¥·¥áx·¥õ', callback_data='help2')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.HELP_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "help2":
        buttons = [[
            InlineKeyboardButton('·¥Ñ·¥Ñ ·¥õ·¥è·¥è üs', callback_data='cc'),
            InlineKeyboardButton('·¥õ·¥è Ä Ä·¥á…¥·¥õ', callback_data='torrent')
        ], [
            InlineKeyboardButton('·¥†s·¥è…¥…¢', callback_data='vsong'),
            InlineKeyboardButton('·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ', callback_data='gpt')
        ], [
            InlineKeyboardButton(' è·¥õs·¥á·¥Ä Ä·¥Ñ ú', callback_data='ytsearch')
        ], [
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help1'),
            InlineKeyboardButton('·¥ò·¥Ä…¢·¥á', callback_data='page'),
            InlineKeyboardButton('·¥ç·¥è Ä·¥á', callback_data='special')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.SPECIAL_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "special":
        buttons = [[
            InlineKeyboardButton('·¥áx·¥õ Ä·¥Ä', callback_data='extra_mod')
        ], [
            InlineKeyboardButton('‚áç  ô·¥Ä·¥Ñ·¥ã ‚áè', callback_data='help2')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.SPECIAL_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "extra_mod":
        buttons = [[
            InlineKeyboardButton('‚áç  ô·¥Ä·¥Ñ·¥ã ‚áè', callback_data='special')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.EXTRA_MOD,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "subscription":
        buttons = [[
            InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã', callback_data='start'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.SUBSCRIPTION_TXT.format(REFERAL_PREMEIUM_TIME, temp.U_NAME, query.from_user.id, REFERAL_COUNT),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "purchase":
        buttons = [[
            InlineKeyboardButton('üíµ ·¥ò·¥Ä è ·¥†…™·¥Ä ·¥ú·¥ò…™ …™·¥Ö üíµ', callback_data='upi_info')
        ],[
            InlineKeyboardButton('üì∏ Íú±·¥Ñ·¥Ä…¥ «´ Ä ·¥Ñ·¥è·¥Ö·¥á üì∏', callback_data='qr_info')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.PURCHASE_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "upi_info":
        buttons = [[
            InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ  ú·¥á Ä·¥á', user_id=int(6497757690))
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='purchase')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.UPI_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "qr_info":
        buttons = [[
            InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ  ú·¥á Ä·¥á', user_id=int(6497757690))
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='purchase')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.QR_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )       

    elif query.data == "seeplans":
        btn = [[
            InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ', user_id=int(6497757690))
        ],[
            InlineKeyboardButton('‚ùå ·¥Ñ ü·¥èÍú±·¥á ‚ùå', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(btn)
        await query.message.reply_photo(
            photo=(SUBSCRIPTION),
            caption=script.PREPLANS_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "give_trial":
        userid = query.from_user.id
        has_free_trial = await db.get_free_trial_status(userid)
        if has_free_trial:
            return
        else:            
            await db.give_free_trial(userid)
            await query.answer("üéâ  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á Íú∞ Ä·¥á·¥á ·¥õ Ä·¥Ä…™ ü Íú∞·¥è Ä 5 ·¥ç…™…¥·¥ú·¥õ·¥ás Íú∞ Ä·¥è·¥ç …¥·¥è·¥° !")
            return    
    
    elif query.data == "premium_info":
        buttons = [[
            InlineKeyboardButton('‚Ä¢ Íú∞ Ä·¥á·¥á ·¥õ Ä…™·¥Ä ü ‚Ä¢', callback_data='free')
        ],[
            InlineKeyboardButton('‚Ä¢  ô Ä·¥è…¥·¥¢·¥á ‚Ä¢', callback_data='broze'),
            InlineKeyboardButton('‚Ä¢ Íú±…™ ü·¥†·¥á Ä ‚Ä¢', callback_data='silver')
        ],[
            InlineKeyboardButton('‚Ä¢ …¢·¥è ü·¥Ö ‚Ä¢', callback_data='gold'),
            InlineKeyboardButton('‚Ä¢ ·¥ò ü·¥Ä·¥õ…™…¥·¥ú·¥ç ‚Ä¢', callback_data='platinum')
        ],[
            InlineKeyboardButton('‚Ä¢ ·¥Ö…™·¥Ä·¥ç·¥è…¥·¥Ö ‚Ä¢', callback_data='diamond'),
            InlineKeyboardButton('‚Ä¢ ·¥è·¥õ ú·¥á Ä ‚Ä¢', callback_data='other')
        ],[ 
            InlineKeyboardButton('‚Ä¢  Ä·¥á“ì·¥á Ä Ä·¥Ä ü  ü…™…¥·¥ã ‚Ä¢', callback_data='subscription')
        ],[               
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á ‚áã', callback_data='start')
        ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.PLAN_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        
    elif query.data == "free":
        buttons = [[
            InlineKeyboardButton('‚öúÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ Íú∞ Ä·¥á·¥á ·¥õ Ä…™·¥Ä ü', user_id=int(6497757690))
        ],[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='other'),
            InlineKeyboardButton('1 / 7', callback_data='pagesn1'),
            InlineKeyboardButton('…¥·¥áx·¥õ ‚ãü', callback_data='broze')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.FREE_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query.data == "broze":
        buttons = [[
            InlineKeyboardButton('üîê ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='purchase')
        ],[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='free'),
            InlineKeyboardButton('2 / 7', callback_data='pagesn1'),
            InlineKeyboardButton('…¥·¥áx·¥õ ‚ãü', callback_data='silver')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.BRONZE_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "silver":
        buttons = [[
            InlineKeyboardButton('üîê ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='purchase')
        ],[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='broze'),
            InlineKeyboardButton('3 / 7', callback_data='pagesn1'),
            InlineKeyboardButton('…¥·¥áx·¥õ ‚ãü', callback_data='gold')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.SILVER_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "gold":
        buttons = [[
            InlineKeyboardButton('üîê ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='purchase')
        ],[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='silver'),
            InlineKeyboardButton('4 / 7', callback_data='pagesn1'),
            InlineKeyboardButton('…¥·¥áx·¥õ ‚ãü', callback_data='platinum')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.GOLD_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        
    elif query.data == "platinum":
        buttons = [[
            InlineKeyboardButton('üîê ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='purchase')
        ],[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='gold'),
            InlineKeyboardButton('5 / 7', callback_data='pagesn1'),
            InlineKeyboardButton('…¥·¥áx·¥õ ‚ãü', callback_data='diamond')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.PLATINUM_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    
    elif query.data == "diamond":
        buttons = [[
            InlineKeyboardButton('üîê ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='purchase')
        ],[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='platinum'),
            InlineKeyboardButton('6 / 7', callback_data='pagesn1'),
            InlineKeyboardButton('…¥·¥áx·¥õ ‚ãü', callback_data='other')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.DIAMOND_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "other":
        buttons = [[
            InlineKeyboardButton('‚òéÔ∏è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥è·¥°…¥·¥á Ä ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á', user_id=int(6497757690))
        ],[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='diamond'),
            InlineKeyboardButton('7 / 7', callback_data='pagesn1'),
            InlineKeyboardButton('…¥·¥áx·¥õ ‚ãü', callback_data='free')
        ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='premium_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.OTHER_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
      )
      

    elif query.data == "about":
        buttons = [[
            InlineKeyboardButton('‚ÄºÔ∏è ·¥Ö…™Íú±·¥Ñ ü·¥Ä…™·¥ç·¥á Ä ‚ÄºÔ∏è', callback_data='disclaimer'),
        ], [
            InlineKeyboardButton ('‚Ä¢ ·¥†…™s…™·¥õ ·¥è·¥ú Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è ‚Ä¢', url="t.me/requestbox1official"),
        ], [
            InlineKeyboardButton('‚Ä¢ ·¥è·¥°…¥·¥á Ä ‚Ä¢', user_id=int(1232136108)),
            InlineKeyboardButton('‚Ä¢ ·¥á·¥Ä Ä…¥ ‚Ä¢', callback_data='shortlink_info')
        ], [
            InlineKeyboardButton('üõ∞Ô∏è  Ä·¥á…¥·¥Ö·¥á Ä…™…¥…¢ Íú±·¥õ·¥Ä·¥õ·¥úÍú± ‚òÅÔ∏è',callback_data='rendr')
        ], [
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á ‚áã', callback_data='start')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.ABOUT_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "rendr":
        await query.answer("‚ö°Ô∏è  ü…™·¥†·¥á s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õ·¥ús ‚ö°Ô∏è\n\n‚ùÇ  Ä·¥Ä·¥ç ‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óå‚óå‚óå\n‚úá ·¥Ñ·¥ò·¥ú ‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óå‚óå‚óå\n‚ú™ ·¥Ö·¥Ä·¥õ·¥Ä ·¥õ Ä·¥ÄÍú∞…™·¥Ñs ‚óè‚óè‚óè‚óè‚óå‚óå‚óå‚óå‚óå‚óå üõ∞\n\n·¥†4.2 [s·¥õ·¥Ä ô ü·¥á] """, show_alert=True)

    elif query.data == "disclaimer":
        buttons = [[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.DISCLAIMER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "sticker":
            buttons = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                    InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
                  ]]
            await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(script.STICKER_TXT),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )  
    elif query.data == "manuelfilter":
        buttons = [[
            InlineKeyboardButton('‚áá  ô·¥Ä·¥Ñ·¥ã', callback_data='filters'),
            InlineKeyboardButton(' ô·¥ú·¥õ·¥õ·¥è…¥Íú±', callback_data='button')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.MANUELFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "button":
        buttons = [[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='manuelfilter')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.BUTTON_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "autofilter":
        buttons = [[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã', callback_data='filters')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.AUTOFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "coct":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.CONNECTION_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "extra":
        buttons = [[
            InlineKeyboardButton('‚áá  ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('·¥Ä·¥Ö·¥ç…™…¥', callback_data='admin')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.EXTRAMOD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query.data == "store_file":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.FILE_STORE_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query.data == "admin":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='extra'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.ADMIN_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "tele":
            buttons = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                    InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
                  ]]
            await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(script.TELEGRAPH_TXT),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
    elif query.data == "settings":
            buttons = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                    InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
                  ]]
            await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(script.SETTINGS_TXT),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
    elif query.data == "rule":
            buttons = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                    InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
                  ]]
            await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(script.RULE_TXT),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
    elif query.data == "ytthumb":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.YTTHUMB,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "video":
            buttons = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                    InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
                  ]]
            await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(script.VIDEO_TXT),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
    elif query.data == "yttags":
            buttons = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                    InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
                  ]]
            await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(script.YTTAGS),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
    elif query.data == "mikey":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.MIKEY,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "donate":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.DONATE,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "github":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.GITHUB,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "kang":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.KANG,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "report":
            buttons = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                    InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
                  ]]
            await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(script.REPORT),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
    elif query.data == "gen_pass":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.GEN_PASS,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "opnai":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help1'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.OPNAI_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "song":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help1'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.SONG_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "purge":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help1'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.PURGE_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "alive":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.ALIVE,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "anime":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help1'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.ANIME_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "repo":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.REPO,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "json":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.JSON_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "lyrics":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.LYRICS,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "shortner":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.SHORTNER,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "torrent":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.TORRENT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "games":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help1'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.GAME_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "restrict":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.RESTRIC_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "kick":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.ZOMBIES_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "management":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='main'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.MANAGEMENT_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "basic_help":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='main'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.BASIC_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "expert_help":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='main'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.EXPERT_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "cc":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.CC_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "vsong":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.VSONG,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "gpt":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.CHATAI,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "ytsearch":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help2'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='group_info')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text="‚óè ‚óå ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óå"
        )
        await query.message.edit_text(
            text="‚óè ‚óè ‚óè"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.YTSEARCH,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "group_info":
        buttons = [[
            InlineKeyboardButton('√ó ·¥Ä ü ü ·¥è·¥ú Ä  ü…™…¥·¥ãÍú± √ó', url="https://t.me/rb1official")
       ],[
            InlineKeyboardButton('‚Ä¢ …¢ Ä·¥è·¥ú·¥ò ‚Ä¢', url="t.me/requestbox1"),
            InlineKeyboardButton('‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚Ä¢', url="t.me/requestbox1official")
       ],[
            InlineKeyboardButton('‚Ä¢  ô·¥è·¥õÍú± ‚Ä¢', url="https://t.me/rb1bots"),
            InlineKeyboardButton('‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ‚Ä¢', url="https://t.me/rb1official")
       ],[
            InlineKeyboardButton('‚Ä¢ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ‚Ä¢', url="https://t.me/rb1official")
       ],[ 
            InlineKeyboardButton('‚óÅ  ô·¥Ä·¥Ñ·¥ã', callback_data='start')
        ]]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.GROUP_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query.data == "stats":
        buttons = [[
            InlineKeyboardButton('‚áá  ô·¥Ä·¥Ñ·¥ã', callback_data='about'),
            InlineKeyboardButton('‚ü≤  Ä·¥á“ì Ä·¥ás ú', callback_data='rfrsh')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        total = await Media.count_documents()
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        monsize = await db.get_db_size()
        free = 536870912 - monsize
        monsize = get_size(monsize)
        free = get_size(free)
        await query.message.edit_text(
            text=script.STATUS_TXT.format(total, users, chats, monsize, free),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "rfrsh":
        await query.answer("Íú∞·¥á·¥õ·¥Ñ ú…™…¥…¢ ·¥ç·¥è…¥…¢·¥è-·¥Ö ô ·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á...")
        buttons = [[
            InlineKeyboardButton('‚áá  ô·¥Ä·¥Ñ·¥ã', callback_data='about'),
            InlineKeyboardButton('‚ü≤  Ä·¥á“ì Ä·¥ás ú', callback_data='rfrsh')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        total = await Media.count_documents()
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        monsize = await db.get_db_size()
        free = 536870912 - monsize
        monsize = get_size(monsize)
        free = get_size(free)
        await query.message.edit_text(
            text=script.STATUS_TXT.format(total, users, chats, monsize, free),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "shortlink_info":
            btn = [[
            InlineKeyboardButton("1 / 3", callback_data="pagesn1"),
            InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data="shortlink_info2")
            ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á ‚áã', callback_data='start')
            ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_text(
                text=(script.SHORTLINK_INFO),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )   
    elif query.data == "shortlink_info2":
            btn = [[
            InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data="shortlink_info"),
            InlineKeyboardButton("2 / 3", callback_data="pagesn1"),
            InlineKeyboardButton("…¥·¥áx·¥õ ‚ãü", callback_data="shortlink_info3")
            ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á ‚áã', callback_data='start')
            ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_text(
                text=(script.SHORTLINK_INFO2),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
    elif query.data == "shortlink_info3":
            btn = [[
            InlineKeyboardButton("‚ãû  ô·¥Ä·¥Ñ·¥ã", callback_data="shortlink_info2"),
            InlineKeyboardButton("3 / 3", callback_data="pagesn1")
            ],[
            InlineKeyboardButton('‚áã  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á ‚áã', callback_data='start')
            ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_text(
                text=(script.SHORTLINK_INFO3),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )   
    
    elif query.data == "disclaimer":
            btn = [[
                    InlineKeyboardButton("‚áã  ô·¥Ä·¥Ñ·¥ã ‚áã", callback_data="about")
                  ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_text(
                text=(script.DISCLAIMER_TXT),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML 
            )
    elif query.data.startswith("setgs"):
        ident, set_type, status, grp_id = query.data.split("#")
        grpid = await active_connection(str(query.from_user.id))

        if str(grp_id) != str(grpid):
            await query.message.edit("Y·¥è·¥ú Ä A·¥Ñ·¥õ…™·¥†·¥á C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ H·¥Äs B·¥á·¥á…¥ C ú·¥Ä…¥…¢·¥á·¥Ö. G·¥è T·¥è /connections ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥.")
            return await query.answer(MSG_ALRT)

        if set_type == 'is_shortlink' and query.from_user.id not in ADMINS:
            return await query.answer(text=f"Hey {query.from_user.first_name}, You can't change shortlink settings for your group !\n\nIt's an admin only setting !", show_alert=True)

        if status == "True":
            await save_group_settings(grpid, set_type, False)
        else:
            await save_group_settings(grpid, set_type, True)

        settings = await get_settings(grpid)

        if settings is not None:
            buttons = [
                [
                    InlineKeyboardButton(' Ä·¥áÍú±·¥ú ü·¥õ ·¥ò·¥Ä…¢·¥á',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                    InlineKeyboardButton(' ô·¥ú·¥õ·¥õ·¥è…¥' if settings["button"] else '·¥õ·¥áx·¥õ',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú∞…™ ü·¥á Íú±·¥á…¥·¥Ö ·¥ç·¥è·¥Ö·¥á', callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}'),
                    InlineKeyboardButton('Íú±·¥õ·¥Ä Ä·¥õ' if settings["botpm"] else '·¥Ä·¥ú·¥õ·¥è',
                                         callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú∞…™ ü·¥á Íú±·¥á·¥Ñ·¥ú Ä·¥á',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["file_secure"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('…™·¥ç·¥Ö ô ·¥ò·¥èÍú±·¥õ·¥á Ä', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["imdb"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú±·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["spell_check"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥çÍú±…¢', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["welcome"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á',
                                         callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["auto_delete"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è Íú∞…™ ü·¥õ·¥á Ä',
                                         callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["auto_ffilter"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('·¥ç·¥Äx  ô·¥ú·¥õ·¥õ·¥è…¥Íú±',
                                         callback_data=f'setgs#max_btn#{settings["max_btn"]}#{str(grp_id)}'),
                    InlineKeyboardButton('10' if settings["max_btn"] else f'{MAX_B_TN}',
                                         callback_data=f'setgs#max_btn#{settings["max_btn"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã',
                                         callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{str(grp_id)}'),
                    InlineKeyboardButton('·¥á…¥·¥Ä ô ü·¥á' if settings["is_shortlink"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                                         callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('‚áã ·¥Ñ ü·¥èÍú±·¥á Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú ‚áã', 
                                         callback_data='close_data'
                                         )
                ]
        ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_reply_markup(reply_markup)
    await query.answer(MSG_ALRT)

    
async def auto_filter(client, msg, spoll=False):
    curr_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
    # reqstr1 = msg.from_user.id if msg.from_user else 0
    # reqstr = await client.get_users(reqstr1)
    
    if not spoll:
        message = msg
        if message.text.startswith("/"): return  # ignore commands
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text):
            return
        if len(message.text) < 100:
            search = message.text
            m=await message.reply_text(f"üîé")
            search = search.lower()
            find = search.split("·¥°·¥Ä…™·¥õ  ô Ä·¥è..")
            search = ""
            removes = ["in","upload", "series", "full", "horror", "thriller", "mystery", "print", "file"]
            for x in find:
                # if x == "in" or x == "upload" or x == "series" or x == "full" or x == "horror" or x == "thriller" or x == "mystery" or x == "print" or x == "subtitle" or x == "subtitles":
                #     continue
                if x in removes:
                    continue
                else:
                    search = search + x + " "
            search = re.sub(r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|bro|bruh|broh|helo|that|find|dubbed|link|venum|iruka|pannunga|pannungga|anuppunga|anupunga|anuppungga|anupungga|film|undo|kitti|kitty|tharu|kittumo|kittum|movie|any(one)|with\ssubtitle(s)?)", "", search, flags=re.IGNORECASE)
            search = re.sub(r"\s+", " ", search).strip()
            search = search.replace("-", " ")
            search = search.replace(":","")
            files, offset, total_results = await get_search_results(message.chat.id ,search, offset=0, filter=True)
            settings = await get_settings(message.chat.id)
            if not files:
                await m.delete()
                if settings["spell_check"]:
                    return await advantage_spell_chok(client, msg)
                else:
                    # if NO_RESULTS_MSG:
                    #     await client.send_message(chat_id=LOG_CHANNEL, text=(script.NORSLTS.format(reqstr.id, reqstr.mention, search)))
                    return
        else:
            return
    else:
        message = msg.message.reply_to_message  # msg will be callback query
        search, files, offset, total_results = spoll
        m=await message.reply_text(f"üîé")
        settings = await get_settings(message.chat.id)
        await msg.message.delete()
    # if 'is_shortlink' in settings.keys():
    #     ENABLE_SHORTLINK = settings['is_shortlink']
    # else:
    #     await save_group_settings(message.chat.id, 'is_shortlink', False)
    #     ENABLE_SHORTLINK = False
    # if 'is_tutorial' in settings.keys():
    #     ENABLE_TUTORIAL = settings['is_tutorial']
    # else:
    #     await save_group_settings(message.chat.id, 'is_tutorial', False)
    #     ENABLE_TUTORIAL = False
    pre = 'filep' if settings['file_secure'] else 'file'
    key = f"{message.chat.id}-{message.id}"
    FRESH[key] = search
    temp.GETALL[key] = files
    temp.SHORT[message.from_user.id] = message.chat.id
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"[{get_size(file.file_size)}] {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}", callback_data=f'{pre}#{file.file_id}'
                ),
            ]
            for file in files
        ]
    # else:
    #     btn = [
    #         [
    #             InlineKeyboardButton(
    #                 text=f"{' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}",
    #                 callback_data=f'{pre}#{file.file_id}',
    #             ),
    #             InlineKeyboardButton(
    #                 text=f"{get_size(file.file_size)}",
    #                 callback_data=f'{pre}#{file.file_id}',
    #             ),
    #         ]
    #         for file in files
    #     ]
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://t.me/OtakuFlix_Network/4639"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    else:
        btn = []
        btn.insert(0, 
            [
                InlineKeyboardButton("‚áà Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥è·¥ò·¥õ…™·¥è…¥Íú±  ú·¥á Ä·¥á ‚áà", 'reqinfo')
            ]
        )
        btn.insert(0, 
            [
                InlineKeyboardButton(f'«´·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton(" ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("Íú±·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        btn.insert(0, [
            InlineKeyboardButton("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f"https://graph.org/REQUESTBOX1-TELEGRAM-PLANS-04-15-2"),
            InlineKeyboardButton("s·¥á…¥·¥Ö ·¥Ä ü ü", callback_data=f"sendfiles#{key}")
        ])

    if offset != "":
        req = message.from_user.id if message.from_user else 0
        try:
            if settings['max_btn']:
                btn.append(
                    [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚áõ",callback_data=f"next_{req}_{key}_{offset}")]
                )
            else:
                btn.append(
                    [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/int(MAX_B_TN))}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚áõ",callback_data=f"next_{req}_{key}_{offset}")]
                )
        except KeyError:
            await save_group_settings(message.chat.id, 'max_btn', True)
            btn.append(
                [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total_results)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ ‚áõ",callback_data=f"next_{req}_{key}_{offset}")]
            )
    else:
        btn.append(
            [InlineKeyboardButton(text="‚Ü≠ …¥·¥è ·¥ç·¥è Ä·¥á ·¥ò·¥Ä…¢·¥áÍú± ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚Ü≠",callback_data="pages")]
        )
    imdb = await get_poster(search, file=(files[0]).file_name) if settings["imdb"] else None
    cur_time = datetime.now(pytz.timezone('Asia/Kolkata')).time()
    time_difference = timedelta(hours=cur_time.hour, minutes=cur_time.minute, seconds=(cur_time.second+(cur_time.microsecond/1000000))) - timedelta(hours=curr_time.hour, minutes=curr_time.minute, seconds=(curr_time.second+(curr_time.microsecond/1000000)))
    remaining_seconds = "{:.2f}".format(time_difference.total_seconds())
    TEMPLATE = script.IMDB_TEMPLATE_TXT
    if imdb:
        cap = TEMPLATE.format(
            query=search,
            title=imdb['title'],
            votes=imdb['votes'],
            aka=imdb["aka"],
            seasons=imdb["seasons"],
            box_office=imdb['box_office'],
            localized_title=imdb['localized_title'],
            kind=imdb['kind'],
            imdb_id=imdb["imdb_id"],
            cast=imdb["cast"],
            runtime=imdb["runtime"],
            countries=imdb["countries"],
            certificates=imdb["certificates"],
            languages=imdb["languages"],
            director=imdb["director"],
            writer=imdb["writer"],
            producer=imdb["producer"],
            composer=imdb["composer"],
            cinematographer=imdb["cinematographer"],
            music_team=imdb["music_team"],
            distributors=imdb["distributors"],
            release_date=imdb['release_date'],
            year=imdb['year'],
            genres=imdb['genres'],
            poster=imdb['poster'],
            plot=imdb['plot'],
            rating=imdb['rating'],
            url=imdb['url'],
            **locals()
        )
        if not settings["button"]:
            cap+="<b>\n\n<u>üìö Requested Files üëá</u></b>\n"
            for file in files:
                cap += f"<b>\nüìÅ <a href='https://telegram.me/{temp.U_NAME}?start=files_{file.file_id}'>[{get_size(file.file_size)}] {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}\n</a></b>"
    else:
        if settings["button"]:
            cap = f"<b>‚Ä¢ ·¥õ…™·¥õ ü·¥á : <code>{search}</code>\n\n‚Ä¢ ·¥õ·¥è·¥õ·¥Ä ü Íú∞…™ ü·¥áÍú± : <code>{total_results}</code>\n‚Ä¢  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è : {message.from_user.mention}\n‚Ä¢  Ä·¥ás·¥ú ü·¥õ …™…¥ : <code>{remaining_seconds} S·¥á·¥Ñ·¥è…¥·¥Ös</code>\n\n‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è : {message.chat.title} \n\n</b>"
        else:
            # cap = f"<b>H·¥á è {message.from_user.mention}, H·¥á Ä·¥á …™s ·¥õ ú·¥á  Ä·¥ás·¥ú ü·¥õ “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {search} \n\n</b>"
            cap = f"<b>‚Ä¢ ·¥õ…™·¥õ ü·¥á : <code>{search}</code>\n\n‚Ä¢ ·¥õ·¥è·¥õ·¥Ä ü Íú∞…™ ü·¥áÍú± : <code>{total_results}</code>\n‚Ä¢  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è : {message.from_user.mention}\n‚Ä¢  Ä·¥ás·¥ú ü·¥õ …™…¥ : <code>{remaining_seconds} S·¥á·¥Ñ·¥è…¥·¥Ös</code>\n\n‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è : {message.chat.title} \n\n</b>"
            cap+="<b><u>üìö Requested Files üëá</u></b>\n\n"
            for file in files:
                cap += f"<b>üìÅ <a href='https://telegram.me/{temp.U_NAME}?start=files_{file.file_id}'>[{get_size(file.file_size)}] {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))}\n\n</a></b>"

    if imdb and imdb.get('poster'):
        try:
            hehe = await message.reply_photo(photo=imdb.get('poster'), caption=cap, reply_markup=InlineKeyboardMarkup(btn))
            await m.delete()
            try:
                if settings['auto_delete']:
                    await asyncio.sleep(300)
                    await hehe.delete()
                    await message.delete()
            except KeyError:
                await save_group_settings(message.chat.id, 'auto_delete', True)
                await asyncio.sleep(300)
                await hehe.delete()
                await message.delete()
        except (MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty):
            pic = imdb.get('poster')
            poster = pic.replace('.jpg', "._V1_UX360.jpg") 
            hmm = await message.reply_photo(photo=poster, caption=cap, reply_markup=InlineKeyboardMarkup(btn))
            await m.delete()
            try:
               if settings['auto_delete']:
                    await asyncio.sleep(300)
                    m=await message.reply_text("üîé")
                    await hmm.delete()
                    await message.delete()
            except KeyError:
                await save_group_settings(message.chat.id, 'auto_delete', True)
                await asyncio.sleep(300)
                await hmm.delete()
                await message.delete()
        except Exception as e:
            logger.exception(e)
            m=await message.reply_text("üîé") 
            fek = await message.reply_text(text=cap, reply_markup=InlineKeyboardMarkup(btn))
            await m.delete()
            try:
                if settings['auto_delete']:
                    await asyncio.sleep(300)
                    await fek.delete()
                    await message.delete()
            except KeyError:
                await save_group_settings(message.chat.id, 'auto_delete', True)
                await asyncio.sleep(300)
                await fek.delete()
                await message.delete()
    else:
        fuk = await message.reply_text(text=cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)
        await m.delete()
        try:
            if settings['auto_delete']:
                await asyncio.sleep(300)
                await fuk.delete()
                await message.delete()
        except KeyError:
            await save_group_settings(message.chat.id, 'auto_delete', True)
            await asyncio.sleep(300)
            await fuk.delete()
            await message.delete()
    # if spoll:
    #     await msg.message.delete()


async def advantage_spell_chok(client, msg):
    mv_id = msg.id
    mv_rqst = msg.text
    reqstr1 = msg.from_user.id if msg.from_user else 0
    reqstr = await client.get_users(reqstr1)
    settings = await get_settings(msg.chat.id)
    query = re.sub(
        r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|br((o|u)h?)*|^h(e|a)?(l)*(o)*|mal(ayalam)?|t(h)?amil|file|that|find|und(o)*|kit(t(i|y)?)?o(w)?|thar(u)?(o)*w?|kittum(o)*|aya(k)*(um(o)*)?|full\smovie|any(one)|with\ssubtitle(s)?)",
        "", msg.text, flags=re.IGNORECASE)  # plis contribute some common words
    query = query.strip() + " movie"
    try:
        movies = await get_poster(mv_rqst, bulk=True)
    except Exception as e:
        logger.exception(e)
        reqst_gle = mv_rqst.replace(" ", "+")
        button = [[
                   InlineKeyboardButton("…¢·¥è·¥è…¢ ü·¥á ·¥ã·¥Ä Ä  ô*·¥Ö·¥ã", url=f"https://www.google.com/search?q={reqst_gle}")
        ]]
        if NO_RESULTS_MSG:
            await client.send_message(chat_id=LOG_CHANNEL, text=(script.NORSLTS.format(reqstr.id, reqstr.mention, mv_rqst)))
        k = await msg.reply_photo(
            photo=SPELL_IMG, 
            caption=script.I_CUDNT.format(mv_rqst),
            reply_markup=InlineKeyboardMarkup(button)
        )
        await asyncio.sleep(30)
        await k.delete()
        return
    movielist = []
    if not movies:
        reqst_gle = mv_rqst.replace(" ", "+")
        button = [[
                   InlineKeyboardButton("…¢·¥è·¥è…¢ ü·¥á ·¥ã·¥Ä Ä  ô*·¥Ö·¥ã", url=f"https://www.google.com/search?q={reqst_gle}")
        ]]
        if NO_RESULTS_MSG:
            await client.send_message(chat_id=LOG_CHANNEL, text=(script.NORSLTS.format(reqstr.id, reqstr.mention, mv_rqst)))
        k = await msg.reply_photo(
            photo=SPELL_IMG, 
            caption=script.I_CUDNT.format(mv_rqst),
            reply_markup=InlineKeyboardMarkup(button)
        )
        await asyncio.sleep(30)
        await k.delete()
        return
    movielist += [movie.get('title') for movie in movies]
    movielist += [f"{movie.get('title')} {movie.get('year')}" for movie in movies]
    SPELL_CHECK[mv_id] = movielist
    btn = [
        [
            InlineKeyboardButton(
                text=movie_name.strip(),
                callback_data=f"spol#{reqstr1}#{k}",
            )
        ]
        for k, movie_name in enumerate(movielist)
    ]
    btn.append([InlineKeyboardButton(text="Close", callback_data=f'spol#{reqstr1}#close_spellcheck')])
    spell_check_del = await msg.reply_photo(
        photo=(SPELL_IMG),
        caption=(script.CUDNT_FND.format(mv_rqst)),
        reply_markup=InlineKeyboardMarkup(btn)
    )
    try:
        if settings['auto_delete']:
            await asyncio.sleep(600)
            await spell_check_del.delete()
    except KeyError:
            grpid = await active_connection(str(msg.from_user.id))
            await save_group_settings(grpid, 'auto_delete', True)
            settings = await get_settings(msg.chat.id)
            if settings['auto_delete']:
                await asyncio.sleep(600)
                await spell_check_del.delete()


async def manual_filters(client, message, text=False):
    settings = await get_settings(message.chat.id)
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_filters(group_id)
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_filter(group_id, keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            joelkb = await client.send_message(
                                group_id, 
                                reply_text, 
                                disable_web_page_preview=True,
                                protect_content=True if settings["file_secure"] else False,
                                reply_to_message_id=reply_id
                            )
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)

                        else:
                            button = eval(btn)
                            joelkb = await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                protect_content=True if settings["file_secure"] else False,
                                reply_to_message_id=reply_id
                            )
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)

                    elif btn == "[]":
                        joelkb = await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            protect_content=True if settings["file_secure"] else False,
                            reply_to_message_id=reply_id
                        )
                        try:
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                        except KeyError:
                            grpid = await active_connection(str(message.from_user.id))
                            await save_group_settings(grpid, 'auto_ffilter', True)
                            settings = await get_settings(message.chat.id)
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)

                    else:
                        button = eval(btn)
                        joelkb = await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                        try:
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                        except KeyError:
                            grpid = await active_connection(str(message.from_user.id))
                            await save_group_settings(grpid, 'auto_ffilter', True)
                            settings = await get_settings(message.chat.id)
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)

                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False

async def global_filters(client, message, text=False):
    settings = await get_settings(message.chat.id)
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_gfilters('gfilters')
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_gfilter('gfilters', keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            joelkb = await client.send_message(
                                group_id, 
                                reply_text, 
                                disable_web_page_preview=True,
                                reply_to_message_id=reply_id
                            )
                            manual = await manual_filters(client, message)
                            if manual == False:
                                settings = await get_settings(message.chat.id)
                                try:
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message)
                                        try:
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                    else:
                                        try:
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_ffilter', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message) 
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                            
                        else:
                            button = eval(btn)
                            joelkb = await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                reply_to_message_id=reply_id
                            )
                            manual = await manual_filters(client, message)
                            if manual == False:
                                settings = await get_settings(message.chat.id)
                                try:
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message)
                                        try:
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                    else:
                                        try:
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_ffilter', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message) 
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()

                    elif btn == "[]":
                        joelkb = await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            reply_to_message_id=reply_id
                        )
                        manual = await manual_filters(client, message)
                        if manual == False:
                            settings = await get_settings(message.chat.id)
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message) 
                        else:
                            try:
                                if settings['auto_delete']:
                                    await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_delete', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_delete']:
                                    await joelkb.delete()

                    else:
                        button = eval(btn)
                        joelkb = await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                        manual = await manual_filters(client, message)
                        if manual == False:
                            settings = await get_settings(message.chat.id)
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message) 
                        else:
                            try:
                                if settings['auto_delete']:
                                    await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_delete', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_delete']:
                                    await joelkb.delete()

                                
                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False
        movielist += [movie.get('title') for movie in movies]
        movielist += [f"{movie.get('title')} {movie.get('year')}" for movie in movies]
        SPELL_CHECK[mv_id] = movielist
        btn = [
            [
                InlineKeyboardButton(
                    text=movie_name.strip(),
                    callback_data=f"spol#{reqstr1}#{k}",
                )
            ]
            for k, movie_name in enumerate(movielist)
        ]
        btn.append([InlineKeyboardButton(text="‚Ü≠ ·¥Ñ ü·¥èÍú±·¥á ‚Ü≠", callback_data=f'spol#{reqstr1}#close_spellcheck')])
        spell_check_del = await msg.reply_text(
            text=script.CUDNT_FND.format(mv_rqst),
            reply_markup=InlineKeyboardMarkup(btn)
        )
        try:
            if settings['auto_delete']:
                await asyncio.sleep(600)
                await spell_check_del.delete()
        except KeyError:
                grpid = await active_connection(str(msg.from_user.id))
                await save_group_settings(grpid, 'auto_delete', True)
                settings = await get_settings(msg.chat.id)
                if settings['auto_delete']:
                    await asyncio.sleep(600)
                    await spell_check_del.delete()
 

async def manual_filters(client, message, text=False):
    settings = await get_settings(message.chat.id)
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_filters(group_id)
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_filter(group_id, keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            joelkb = await client.send_message(
                                group_id, 
                                reply_text, 
                                disable_web_page_preview=True,
                                protect_content=True if settings["file_secure"] else False,
                                reply_to_message_id=reply_id
                            )
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)

                        else:
                            button = eval(btn)
                            joelkb = await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                protect_content=True if settings["file_secure"] else False,
                                reply_to_message_id=reply_id
                            )
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)

                    elif btn == "[]":
                        joelkb = await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            protect_content=True if settings["file_secure"] else False,
                            reply_to_message_id=reply_id
                        )
                        try:
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                        except KeyError:
                            grpid = await active_connection(str(message.from_user.id))
                            await save_group_settings(grpid, 'auto_ffilter', True)
                            settings = await get_settings(message.chat.id)
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)

                    else:
                        button = eval(btn)
                        joelkb = await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                        try:
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await asyncio.sleep(600)
                                        await joelkb.delete()
                        except KeyError:
                            grpid = await active_connection(str(message.from_user.id))
                            await save_group_settings(grpid, 'auto_ffilter', True)
                            settings = await get_settings(message.chat.id)
                            if settings['auto_ffilter']:
                                await auto_filter(client, message)

                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False

async def global_filters(client, message, text=False):
    settings = await get_settings(message.chat.id)
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_gfilters('gfilters')
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_gfilter('gfilters', keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            joelkb = await client.send_message(
                                group_id, 
                                reply_text, 
                                disable_web_page_preview=True,
                                reply_to_message_id=reply_id
                            )
                            manual = await manual_filters(client, message)
                            if manual == False:
                                settings = await get_settings(message.chat.id)
                                try:
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message)
                                        try:
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                    else:
                                        try:
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_ffilter', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message) 
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                            
                        else:
                            button = eval(btn)
                            joelkb = await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                reply_to_message_id=reply_id
                            )
                            manual = await manual_filters(client, message)
                            if manual == False:
                                settings = await get_settings(message.chat.id)
                                try:
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message)
                                        try:
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await joelkb.delete()
                                    else:
                                        try:
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                        except KeyError:
                                            grpid = await active_connection(str(message.from_user.id))
                                            await save_group_settings(grpid, 'auto_delete', True)
                                            settings = await get_settings(message.chat.id)
                                            if settings['auto_delete']:
                                                await asyncio.sleep(600)
                                                await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_ffilter', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_ffilter']:
                                        await auto_filter(client, message) 
                            else:
                                try:
                                    if settings['auto_delete']:
                                        await joelkb.delete()
                                except KeyError:
                                    grpid = await active_connection(str(message.from_user.id))
                                    await save_group_settings(grpid, 'auto_delete', True)
                                    settings = await get_settings(message.chat.id)
                                    if settings['auto_delete']:
                                        await joelkb.delete()

                    elif btn == "[]":
                        joelkb = await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            reply_to_message_id=reply_id
                        )
                        manual = await manual_filters(client, message)
                        if manual == False:
                            settings = await get_settings(message.chat.id)
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message) 
                        else:
                            try:
                                if settings['auto_delete']:
                                    await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_delete', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_delete']:
                                    await joelkb.delete()

                    else:
                        button = eval(btn)
                        joelkb = await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                        manual = await manual_filters(client, message)
                        if manual == False:
                            settings = await get_settings(message.chat.id)
                            try:
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message)
                                    try:
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await joelkb.delete()
                                else:
                                    try:
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                                    except KeyError:
                                        grpid = await active_connection(str(message.from_user.id))
                                        await save_group_settings(grpid, 'auto_delete', True)
                                        settings = await get_settings(message.chat.id)
                                        if settings['auto_delete']:
                                            await asyncio.sleep(600)
                                            await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_ffilter', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_ffilter']:
                                    await auto_filter(client, message) 
                        else:
                            try:
                                if settings['auto_delete']:
                                    await joelkb.delete()
                            except KeyError:
                                grpid = await active_connection(str(message.from_user.id))
                                await save_group_settings(grpid, 'auto_delete', True)
                                settings = await get_settings(message.chat.id)
                                if settings['auto_delete']:
                                    await joelkb.delete()

                                
                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False
